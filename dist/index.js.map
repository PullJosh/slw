{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/pleasejs/dist/Please.js","node_modules/trim-lines/index.js","src/Entity.js","src/Level.js","src/SLW.js","src/Tile.js","src/index.js","src/util.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","define","amd","this","Math","random","floor","max","min","F","HSV_to_HEX","HSV_to_RGB","g","b","console","error","hasOwnProperty","charCodeAt","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hue","saturation","value","base_color","greyscale","grayscale","golden","full_random","colors_returned","format","seed","c","scheme_type","h","NAME_to_HEX","toLowerCase","NAME_to_RGB","HEX_to_RGB","NAME_to_HSV","HEX_to_HSV","replace","exec","parseInt","RGB_to_HEX","toString","slice","v","RGB_to_HSV","make_scheme","d","push","abs","make_color","match","m","E","p","make_contrast","trimLines","String","WHITE_SPACE_COLLAPSABLE_LINE","LINE","_SLW","_Tile","_util","DEBUG","Entity","game","_classCallCheck","x","y","xv","yv","w","color","sign","collides","_i","tileAboveX","round","left","_Tile2","default","size","tileAboveY","top","tileAbove","level","tileAt","on","airPunched","apply","ctx","canvas","getContext","CanvasRenderingContext2D","fillStyle","fillRect","sprite","tileLeft","tileRight","right","tileTop","tileBottom","bottom","levelWidth","levelHeight","collision","tile","solid","ceil","Player","arguments","undefined","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","jumpSound","window","Audio","keys","grounded","play","sheet","Image","_get","prototype","Level","id","leveldata","tileset","tilemap","rows","split","row","get","exists","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","update","err","return","viewStartX","viewStartY","viewEndX","viewEndY","_getAbsolutePosition","getAbsolutePosition","_getAbsolutePosition2","_slicedToArray","rendX","rendY","_tile$position","position","tileX","tileY","drawImage","_ref2","_ref","warn","newTile","_ref4","_ref3","oldTile","create","_ref6","_ref5","_Level","_Entity","SLW","document","createElement","width","height","addEventListener","evt","keyCode","setAttribute","player","camera","_Level2","Tile","props","name","str","RangeError","Map","topTile","bottomTile","leftTile","rightTile","log","replaceTile","onload","_SLW2","body","appendChild","focus","render","requestAnimationFrame","hasFocus","canvasClear","draw","src"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,QAAAU,OAAAJ,UCCA,SAAAd,EAAAG,EAAAI,GAAA,kBAAAY,SAAAA,OAAAC,IAAAD,UAAAZ,GAAA,gBAAAO,SAAAI,OAAAJ,QAAAP,IAAAJ,EAAAH,GAAAO,KAAA,SAAAc,KAAA,WAAA,YAAA,SAAArB,KAAA,QAAAA,GAAAA,EAAAG,EAAAI,GAAA,GAAAF,GAAAiB,KAAAC,MAAA,OAAAhB,aAAAM,KAAAR,EAAAE,EAAAgB,QAAAD,KAAAE,MAAAnB,KAAAF,EAAAH,EAAA,IAAAA,EAAA,QAAAG,GAAAH,EAAAG,EAAAI,GAAA,GAAAF,GAAAiB,KAAAC,MAAA,OAAAhB,aAAAM,KAAAR,EAAAE,EAAAgB,QAAAlB,KAAAF,EAAAH,GAAAA,EAAA,QAAAO,GAAAP,EAAAG,EAAAI,GAAA,MAAAe,MAAAG,IAAAtB,EAAAmB,KAAAI,IAAA1B,EAAAO,IAAA,QAAAF,GAAAL,EAAAG,GAAA,GAAAI,EAAA,QAAAP,GAAA,IAAA,MAAA,IAAAO,EAAA,EAAAA,EAAAJ,EAAAa,OAAAT,IAAAJ,EAAAI,GAAAoB,EAAAC,WAAAzB,EAAAI,GAAA,MAAA,KAAA,MAAA,IAAAA,EAAA,EAAAA,EAAAJ,EAAAa,OAAAT,IAAAJ,EAAAI,GAAAoB,EAAAE,WAAA1B,EAAAI,GAAA,MAAA,KAAA,aAAA,IAAAA,EAAA,EAAAA,EAAAJ,EAAAa,OAAAT,IAAA,CAAA,GAAAF,GAAAsB,EAAAE,WAAA1B,EAAAI,GAAAJ,GAAAI,GAAA,OAAAF,EAAAF,EAAA,IAAAE,EAAAyB,EAAA,IAAAzB,EAAA0B,EAAA,IAAA,KAAA,KAAA,MAAA,KAAA,SAAAC,QAAAC,MAAA,0BAAA,MAAA9B,GAAA,QAAAD,GAAAF,GAAA,GAAAG,GAAAwB,EAAAE,WAAA7B,GAAAO,GAAA,IAAAJ,EAAAA,EAAA,IAAAA,EAAA2B,EAAA,IAAA3B,EAAA4B,GAAA,GAAA,OAAAxB,IAAA,IAAA,OAAA,QAAA,QAAAN,GAAAD,GAAA,GAAAG,KAAA,KAAA,GAAAI,KAAAP,GAAAA,EAAAkC,eAAA3B,KAAAJ,EAAAI,GAAAP,EAAAO,GAAA,OAAAJ,GAAA,QAAAU,GAAAb,GAAA,QAAAG,KAAAE,GAAAA,EAAA,GAAA,IAAAH,GAAAA,EAAAK,EAAAF,IAAA,GAAA,IAAAL,GAAAO,EAAAF,EAAA,OAAAE,GAAAF,GAAAE,EAAAL,GAAAK,EAAAL,GAAAF,EAAAO,GAAAA,EAAAF,GAAAE,EAAAL,IAAA,KAAA,IAAA,GAAAK,MAAAF,EAAA,EAAAH,EAAA,EAAAD,EAAA,EAAA,IAAAA,EAAAA,IAAAM,EAAAN,GAAAA,CAAA,KAAA,GAAAY,GAAA,EAAAc,EAAA,EAAA,IAAAd,EAAAA,IAAA,CAAAc,GAAAA,EAAApB,EAAAM,GAAAb,EAAAmC,WAAAtB,EAAAb,EAAAgB,SAAA,GAAA,IAAAZ,GAAAG,EAAAM,EAAAN,GAAAM,GAAAN,EAAAoB,GAAApB,EAAAoB,GAAAvB,EAAAiB,KAAAE,OAAA,WAAA,IAAA,GAAAvB,GAAA,EAAAO,EAAA,EAAAF,EAAA,EAAA,EAAAL,EAAAA,IAAAO,GAAAJ,IAAAE,EAAAA,GAAA,GAAA,OAAAE,GAAA,qBAAA,GAAAoB,MAAAvB,GAAAgC,UAAA,SAAAC,aAAA,SAAAC,KAAA,SAAAC,WAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,OAAA,SAAAC,MAAA,SAAAC,eAAA,SAAAC,KAAA,SAAAC,WAAA,SAAAC,MAAA,SAAAC,UAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,UAAA,SAAAC,MAAA,SAAAC,eAAA,SAAAC,SAAA,SAAAC,QAAA,SAAAC,KAAA,SAAAC,SAAA,SAAAC,SAAA,SAAAC,cAAA,SAAAC,SAAA,SAAAC,SAAA,SAAAC,UAAA,SAAAC,UAAA,SAAAC,YAAA,SAAAC,eAAA,SAAAC,WAAA,SAAAC,WAAA,SAAAC,QAAA,SAAAC,WAAA,SAAAC,aAAA,SAAAC,cAAA,SAAAC,cAAA,SAAAC,cAAA,SAAAC,cAAA,SAAAC,WAAA,SAAAC,SAAA,SAAAC,YAAA,SAAAC,QAAA,SAAAC,QAAA,SAAAC,WAAA,SAAAC,UAAA,SAAAC,YAAA,SAAAC,YAAA,SAAAC,QAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,KAAA,SAAAC,UAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,MAAA,SAAAC,YAAA,SAAAC,SAAA,SAAAC,QAAA,SAAAC,UAAA,SAAAC,OAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,SAAA,SAAAC,cAAA,SAAAC,UAAA,SAAAC,aAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,UAAA,SAAAC,qBAAA,SAAAC,UAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,UAAA,SAAAC,YAAA,SAAAC,cAAA,SAAAC,aAAA,SAAAC,eAAA,SAAAC,eAAA,SAAAC,eAAA,SAAAC,YAAA,SAAAC,KAAA,SAAAC,UAAA,SAAAC,MAAA,SAAAC,QAAA,SAAAC,OAAA,SAAAC,iBAAA,SAAAC,WAAA,SAAAC,aAAA,SAAAC,aAAA,SAAAC,eAAA,SAAAC,gBAAA,SAAAC,kBAAA,SAAAC,gBAAA,SAAAC,gBAAA,SAAAC,aAAA,SAAAC,UAAA,SAAAC,UAAA,SAAAC,SAAA,SAAAC,YAAA,SAAAC,KAAA,SAAAC,QAAA,SAAAC,MAAA,SAAAC,UAAA,SAAAC,OAAA,SAAAC,UAAA,SAAAC,OAAA,SAAAC,cAAA,SAAAC,UAAA,SAAAC,cAAA,SAAAC,cAAA,SAAAC,WAAA,SAAAC,UAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,WAAA,SAAAC,OAAA,SAAAC,cAAA,SAAAC,IAAA,SAAAC,UAAA,SAAAC,UAAA,SAAAC,YAAA,SAAAC,OAAA,SAAAC,WAAA,SAAAC,SAAA,SAAAC,SAAA,SAAAC,OAAA,SAAAC,OAAA,SAAAC,QAAA,SAAAC,UAAA,SAAAC,UAAA,SAAAC,UAAA,SAAAC,KAAA,SAAAC,YAAA,SAAAC,UAAA,SAAAC,IAAA,SAAAC,KAAA,SAAAC,QAAA,SAAAC,OAAA,SAAAC,UAAA,SAAAC,OAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,WAAA,SAAAC,OAAA,SAAAC,YAAA,UAAA9K,EAAA,iBAAAH,GAAAkL,IAAA,KAAAC,WAAA,KAAAC,MAAA,KAAAC,WAAA,GAAAC,WAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAC,aAAA,EAAAC,gBAAA,EAAAC,OAAA,MAAAC,KAAA,MAAAC,GAAAC,YAAA,YAAAH,OAAA,OAAAI,GAAAP,QAAA,EAAAG,OAAA,MAAA,OAAAtK,GAAA2K,YAAA,SAAAtM,GAAA,MAAAA,GAAAA,EAAAuM,cAAAvM,IAAAI,GAAAA,EAAAJ,OAAAgC,SAAAC,MAAA,+BAAAN,EAAA6K,YAAA,SAAAxM,GAAA,MAAA2B,GAAA8K,WAAA9K,EAAA2K,YAAAtM,KAAA2B,EAAA+K,YAAA,SAAA1M,GAAA,MAAA2B,GAAAgL,WAAAhL,EAAA2K,YAAAtM,KAAA2B,EAAA8K,WAAA,SAAAzM,GAAA,GAAAG,GAAA,kCAAAH,GAAAA,EAAA4M,QAAAzM,EAAA,SAAAH,EAAAG,EAAAI,EAAAF,GAAA,MAAAF,GAAAA,EAAAI,EAAAA,EAAAF,EAAAA,GAAA,IAAAE,GAAA,4CAAAsM,KAAA7M,EAAA,OAAAO,IAAAJ,EAAA2M,SAAAvM,EAAA,GAAA,IAAAuB,EAAAgL,SAAAvM,EAAA,GAAA,IAAAwB,EAAA+K,SAAAvM,EAAA,GAAA,KAAA,MAAAoB,EAAAoL,WAAA,SAAA/M,GAAA,MAAA,MAAA,GAAA,KAAAA,EAAAG,GAAA,KAAAH,EAAA8B,GAAA,GAAA9B,EAAA+B,GAAAiL,SAAA,IAAAC,MAAA,IAAAtL,EAAAE,WAAA,SAAA7B,GAAA,GAAAG,GAAAI,EAAAF,EAAAH,EAAAD,EAAAY,EAAAc,EAAAvB,EAAAK,EAAAT,EAAAqM,EAAA/L,EAAAN,EAAAI,EAAA+L,EAAAnM,EAAAkN,CAAA,IAAA,IAAA5M,EAAA,OAAAH,EAAAgM,EAAArK,EAAAqK,EAAApK,EAAAoK,EAAA,QAAA1L,GAAA,GAAAP,EAAAoB,KAAAE,MAAAf,GAAAR,EAAAQ,EAAAP,EAAAW,EAAAsL,GAAA,EAAA7L,GAAAqB,EAAAwK,GAAA,EAAA7L,EAAAL,GAAAG,EAAA+L,GAAA,EAAA7L,GAAA,EAAAL,IAAAC,GAAA,IAAA,GAAAC,EAAAgM,EAAA5L,EAAAH,EAAAC,EAAAQ,CAAA,MAAA,KAAA,GAAAV,EAAAwB,EAAApB,EAAA4L,EAAA9L,EAAAQ,CAAA,MAAA,KAAA,GAAAV,EAAAU,EAAAN,EAAA4L,EAAA9L,EAAAD,CAAA,MAAA,KAAA,GAAAD,EAAAU,EAAAN,EAAAoB,EAAAtB,EAAA8L,CAAA,MAAA,KAAA,GAAAhM,EAAAC,EAAAG,EAAAM,EAAAR,EAAA8L,CAAA,MAAA,KAAA,GAAAhM,EAAAgM,EAAA5L,EAAAM,EAAAR,EAAAsB,EAAA,OAAAxB,EAAAmB,KAAAE,MAAA,IAAArB,GAAA2B,EAAAR,KAAAE,MAAA,IAAAjB,GAAAwB,EAAAT,KAAAE,MAAA,IAAAnB,KAAAsB,EAAAwL,WAAA,SAAAnN,GAAA,GAAAG,GAAAH,EAAAG,EAAA,IAAAI,EAAAP,EAAA8B,EAAA,IAAAzB,EAAAL,EAAA+B,EAAA,IAAA7B,EAAA,EAAAD,EAAA,EAAAY,EAAA,EAAAc,EAAAL,KAAAI,IAAAvB,EAAAmB,KAAAI,IAAAnB,EAAAF,IAAAD,EAAAkB,KAAAG,IAAAtB,EAAAmB,KAAAG,IAAAlB,EAAAF,GAAA,IAAAsB,IAAAvB,EAAA,MAAAS,GAAAc,GAAA0K,EAAA,EAAAjM,EAAA,EAAA8M,EAAArM,EAAA,IAAAJ,GAAAN,IAAAwB,EAAApB,EAAAF,EAAAA,IAAAsB,EAAAxB,EAAAI,EAAAF,EAAAF,EAAAG,EAAAH,IAAAwB,EAAA,EAAAtB,IAAAsB,EAAA,EAAA,CAAA,OAAAzB,GAAA,IAAAI,EAAAG,GAAAL,EAAAuB,IAAA1B,GAAAG,EAAAuB,GAAAvB,EAAAS,EAAAT,GAAAiM,EAAAnM,EAAAE,EAAAH,EAAAiN,EAAArM,IAAAc,EAAAC,WAAA,SAAA5B,GAAA,MAAA2B,GAAAoL,WAAApL,EAAAE,WAAA7B,KAAA2B,EAAAgL,WAAA,SAAA3M,GAAA,MAAA2B,GAAAwL,WAAAxL,EAAA8K,WAAAzM,KAAA2B,EAAAyL,YAAA,SAAApN,EAAAG,GAAA,QAAAD,GAAAF,GAAA,OAAAqM,EAAArM,EAAAqM,EAAAjM,EAAAJ,EAAAI,EAAA8M,EAAAlN,EAAAkN,GAAA,GAAArM,GAAAc,EAAAvB,EAAAK,EAAAH,EAAA+L,EAAApM,EAAAkM,EAAA,IAAA,OAAAhM,EAAA,IAAA,GAAAkN,KAAAlN,GAAAA,EAAA+B,eAAAmL,KAAAhB,EAAAgB,GAAAlN,EAAAkN,GAAA,IAAAvL,IAAA9B,EAAA,QAAAqM,EAAAD,YAAAG,eAAA,IAAA,gBAAA,IAAA,OAAA,IAAAjM,EAAA,EAAA,GAAAA,EAAAA,IAAAO,EAAAX,EAAAF,GAAAI,EAAAS,EAAAT,EAAA,GAAAE,EAAAF,EAAAG,EAAAH,EAAA,EAAA,GAAAK,EAAAI,EAAAqM,EAAA,GAAA5M,EAAAG,EAAAF,EAAAE,EAAA,EAAA,GAAAI,EAAAT,EAAAA,EAAAS,EAAAqM,EAAAzM,EAAAqB,EAAAwL,KAAAzM,EAAA,KAAAP,EAAA,EAAA,GAAAA,EAAAA,IAAAO,EAAAX,EAAAF,GAAAI,EAAAS,EAAAT,EAAA,GAAAE,EAAAF,EAAAG,EAAAH,EAAA,EAAA,GAAAK,EAAAI,EAAAqM,EAAA,GAAA5M,EAAAG,EAAAF,EAAAE,EAAA,EAAA,GAAAI,EAAAT,EAAAA,EAAAS,EAAAqM,EAAAzM,EAAAqB,EAAAwL,KAAAzM,EAAA,MAAA,KAAA,gBAAA,IAAA,aAAA,IAAA,OAAAA,EAAAX,EAAAF,GAAAa,EAAAwL,GAAAxL,EAAAwL,EAAA,KAAA,IAAAvK,EAAAwL,KAAAzM,EAAA,MAAA,KAAA,sBAAA,IAAA,mBAAA,IAAA,QAAAA,EAAAX,EAAAF,GAAAa,EAAAwL,GAAAxL,EAAAwL,EAAA,KAAA,IAAAvK,EAAAwL,KAAAzM,GAAAA,EAAAX,EAAAF,GAAAa,EAAAwL,EAAA/K,KAAAiM,KAAA1M,EAAAwL,EAAA,KAAA,KAAAvK,EAAAwL,KAAAzM,EAAA,MAAA,KAAA,uBAAA,IAAA,oBAAA,IAAA,SAAAA,EAAAX,EAAAF,GAAAa,EAAAwL,GAAAxL,EAAAwL,EAAA,KAAA,IAAAvK,EAAAwL,KAAAzM,GAAAA,EAAAwL,GAAAxL,EAAAwL,EAAA,IAAA,IAAA1K,EAAAzB,EAAAW,GAAAiB,EAAAwL,KAAAzM,GAAAA,EAAAwL,GAAAxL,EAAAwL,EAAA,KAAA,IAAAvK,EAAAwL,KAAA3L,EAAA,MAAA,KAAA,YAAA,IAAA,MAAA,IAAArB,EAAA,EAAA,GAAAA,EAAAA,IAAAO,EAAAX,EAAAF,GAAAa,EAAAwL,GAAAxL,EAAAwL,EAAA,GAAA/L,GAAA,IAAAwB,EAAAwL,KAAAzM,EAAA,MAAA,KAAA,UAAA,IAAA,QAAA,IAAA,MAAA,IAAAP,EAAA,EAAA,EAAAA,EAAAA,IAAAO,EAAAX,EAAAF,GAAAa,EAAAwL,GAAAxL,EAAAwL,EAAA,IAAA/L,GAAA,IAAAwB,EAAAwL,KAAAzM,EAAA,MAAA,SAAAmB,QAAAC,MAAA,gCAAA,MAAA5B,GAAAgM,EAAAJ,OAAAM,cAAAzK,GAAAA,GAAAH,EAAA6L,WAAA,SAAAtN,GAAA,GAAAE,MAAA+L,EAAAlM,EAAAK,GAAA+L,EAAA,IAAA,IAAA,OAAAnM,EAAA,IAAA,GAAAmN,KAAAnN,GAAAA,EAAAgC,eAAAmL,KAAAlB,EAAAkB,GAAAnN,EAAAmN,GAAA,IAAAvL,GAAA,IAAA,iBAAAqK,GAAAD,OAAApK,EAAA,GAAAjB,GAAAsL,EAAAD,OAAAC,EAAAR,WAAA3K,OAAA,IAAAqL,EAAAF,EAAAR,WAAA8B,MAAA,oCAAA9L,EAAAgL,WAAAR,EAAAR,YAAAhK,EAAA+K,YAAAP,EAAAR,YAAA,KAAA,GAAA+B,GAAA,EAAAA,EAAAvB,EAAAH,gBAAA0B,IAAA,CAAA,GAAAhN,GAAAiN,EAAA5L,EAAA6L,EAAA5N,EAAA,EAAA,IAAA8B,EAAA,QAAAuK,GAAA3L,EAAAH,EAAAP,EAAAqM,EAAAA,EAAA,EAAAA,EAAAA,EAAA,EAAAvK,GAAA,EAAA,KAAA6L,EAAA,IAAAtB,EAAAjM,EAAA,EAAAD,EAAA,GAAA,IAAA2B,GAAAC,EAAA5B,EAAA,GAAA,IAAA2B,GAAA1B,EAAAkN,MAAAjB,EAAA3L,EAAAN,EAAAuN,EAAAT,EAAAnL,MAAArB,EAAAyL,EAAAP,aAAA,GAAAO,EAAAN,aAAA,EAAA,EAAAM,EAAAL,UAAA,GAAA8B,EAAAA,EAAAnN,GAAA,IAAA,OAAA0L,EAAAX,KAAAW,EAAAJ,eAAA,EAAA6B,EAAArN,EAAA4L,EAAAX,IAAA,EAAA,KAAAmC,EAAAxB,EAAAP,aAAA,GAAAO,EAAAN,aAAA,EAAA,EAAAM,EAAAJ,eAAA,EAAA5L,EAAA,EAAA,EAAA2B,GAAA,OAAAqK,EAAAV,WAAA,GAAAlL,EAAA4L,EAAAV,WAAA,EAAA,GAAA1J,EAAAoK,EAAAJ,eAAA,EAAA5L,EAAA,EAAA,EAAA2B,GAAAqK,EAAAP,aAAA,GAAAO,EAAAN,aAAA,EAAA1L,EAAA,IAAA,IAAA2B,GAAA,OAAAqK,EAAAT,MAAA,IAAAnL,EAAA4L,EAAAT,MAAA,EAAA,GAAAtL,EAAAkN,MAAAjB,EAAA3L,EAAAN,EAAAuN,EAAAT,EAAAnL,KAAA,MAAA1B,GAAA8L,EAAAF,OAAAM,cAAAnM,GAAAA,GAAAuB,EAAAkM,cAAA,SAAA7N,EAAAG,GAAA,GAAAU,GAAAZ,EAAAoM,EAAA,IAAA,OAAAlM,EAAA,IAAA,GAAAC,KAAAD,GAAAA,EAAA+B,eAAA9B,KAAAS,EAAAT,GAAAD,EAAAC,GAAA,IAAAE,GAAA6L,EAAAkB,EAAAnN,EAAAF,EAAA,IAAAa,EAAAiL,UAAA,EAAAK,EAAAnM,EAAAqM,GAAA,EAAA5L,GAAA,QAAA,CAAA,GAAAqB,GAAAH,EAAAyL,YAAApN,GAAAoM,YAAA,gBAAAH,OAAA,QAAA,EAAAE,GAAA5L,EAAAuB,EAAAuK,EAAA,GAAA,EAAA,KAAA,GAAAqB,EAAA,OAAA,SAAAL,EAAAK,EAAAnN,EAAAP,EAAAkN,EAAA,IAAA,EAAA,GAAA,UAAAG,IAAAK,EAAAnN,EAAAP,EAAAkN,EAAA,IAAA,EAAA,IAAA5M,IAAA+L,EAAAF,EAAA/L,EAAAJ,EAAAI,EAAA8M,EAAAQ,IAAArN,EAAAQ,EAAAoL,OAAAM,cAAAjM,GAAAA,EAAA,IAAAqB,EAAA,MAAA3B,gDCDA,YAqBA,SAAA8N,WAAApC,OACA,MAAAqC,QAAArC,OAAAkB,QAAAoB,6BAAAC,MAhBA,GAAAD,8BAAA,mBACAC,KAAA,IAsBA/M,QAAAJ,QAAAgN,u1DCxBAI,KAAA1N,QAAA,SACA2N,oCAAA3N,QAAA,gDAEA4N,MAAA5N,QAAA,UALM6N,OAAQ,EAOOC,kBAqCnB,QAAAA,QAAYC,MAAWC,gBAAAnN,KAAAiN,QACrBjN,KAAKkN,KAAOA,KAEZlN,KAAKoN,EAAI,EACTpN,KAAKqN,EAAI,EAETrN,KAAKsN,GAAK,EACVtN,KAAKuN,GAAK,EAEVvN,KAAKwN,EAAI,GACTxN,KAAKgL,EAAI,EAGT,IAAMF,GAAI3L,QAAQ,YAAYgN,YAAavB,OAAQ,QAAS,EAC5D5K,MAAKyN,MAAL,QAAqB3C,EAAEhM,EAAvB,KAA6BgM,EAAErK,EAA/B,KAAqCqK,EAAEpK,EAAvC,gEA7BA,MAAOT,MAAKE,MAAMH,KAAKqN,kCAIvB,MAAOpN,MAAKE,MAAMH,KAAKqN,EAAIrN,KAAKgL,gCAIhC,MAAO/K,MAAKE,MAAMH,KAAKoN,iCAIvB,MAAOnN,MAAKE,MAAMH,KAAKoN,EAAIpN,KAAKwN,2DAqBhC,GAAI3B,GAAY,EAGVyB,GAAKrN,KAAKE,MAAMH,KAAKsN,GAC3BzB,IAAI,EAAAkB,MAAAW,MAAKJ,GAET,KAAK,GAAIlO,GAAI,EAAGA,EAAIa,KAAKiM,IAAIoB,IAAKlO,IAChCY,KAAKoN,GAAKvB,EACN7L,KAAK2N,WACP3N,KAAKoN,GAAKvB,EACV7L,KAAKsN,GAAK,EAKd,IAAMC,IAAKtN,KAAKE,MAAMH,KAAKuN,GAC3B1B,IAAI,EAAAkB,MAAAW,MAAKH,GAET,KAAK,GAAIK,IAAI,EAAGA,GAAI3N,KAAKiM,IAAIqB,IAAKK,KAEhC,GADA5N,KAAKqN,GAAKxB,EACN7L,KAAK2N,SAAU,CACjB3N,KAAKqN,GAAKxB,EACV7L,KAAKuN,GAAK,CAEV,IAAMM,YAAa5N,KAAK6N,MAAM9N,KAAK+N,KAAOC,OAAAC,QAAKC,MACzCC,WAAanO,KAAKoO,IAAMJ,OAAAC,QAAKC,KAAO,EACpCG,UAAYrO,KAAKkN,KAAKoB,MAAMC,QAAQV,WAAYM,YAElDE,WAAUG,GAAGC,YACfJ,UAAUG,GAAGC,WAAWC,MAAML,2CAOpC,GAAMM,KAAM3O,KAAKkN,KAAK0B,OAAOC,WAAW,KAClCF,eAAeG,4BAEjB9B,QAEF2B,IAAII,UAAY/O,KAAKyN,MACrBkB,IAAIK,SAAShP,KAAK+N,KAAM/N,KAAKoO,IAAKpO,KAAKwN,EAAI,EAAGxN,KAAKgL,EAAI,IAGrDhL,KAAKiP,yCAQT,GAAIC,UAAajP,KAAKE,MAAMH,KAAK+N,KAASC,OAAAC,QAAKC,MAC3CiB,UAAalP,KAAKE,MAAMH,KAAKoP,MAASpB,OAAAC,QAAKC,MAC3CmB,QAAapP,KAAKE,MAAMH,KAAKoO,IAASJ,OAAAC,QAAKC,MAC3CoB,WAAarP,KAAKE,MAAMH,KAAKuP,OAASvB,OAAAC,QAAKC,MAEzCsB,WAAcxP,KAAKkN,KAAKoB,MAAMd,EAC9BiC,YAAczP,KAAKkN,KAAKoB,MAAMtD,CAEhCkE,UAAW,IAAeA,SAAW,GACrCC,UAAYK,aAAcL,UAAYK,YACtCH,QAAU,IAAgBA,QAAU,GACpCC,WAAaG,cAAaH,WAAaG,YAG3C,KAAK,GADDC,YAAY,EACPtC,EAAI8B,SAAU9B,GAAK+B,UAAW/B,IACrC,IAAK,GAAIC,GAAIgC,QAAShC,GAAKiC,WAAYjC,IAAK,CAC1C,GAAIsC,MAAO3P,KAAKkN,KAAKoB,MAAMC,QAAQnB,EAAGC,GAElCsC,MAAKC,QAAOF,WAAY,GAIhC,MAAOA,4CAOP,MACE1P,MAAKkN,KAAKoB,MAAMC,QAAQtO,KAAKE,MAAMH,KAAKoN,EAAI,IAAKpN,KAAKuP,OAAS,GAAK,KAAMK,OAC1E5P,KAAKkN,KAAKoB,MAAMC,QAAQtO,KAAK4P,KAAK7P,KAAKoN,EAAI,IAAKpN,KAAKuP,OAAS,GAAK,KAAMK,oCA3I1D3C,eAgJR6C,yBAGX,QAAAA,QAAY5C,MAAwC,GAA7BE,GAA6B2C,UAAApQ,OAAA,GAAAqQ,SAAAD,UAAA,GAAAA,UAAA,GAAjB,EAAG1C,EAAc0C,UAAApQ,OAAA,GAAAqQ,SAAAD,UAAA,GAAAA,UAAA,GAAH,CAAG5C,iBAAAnN,KAAA8P,OAAA,IAAAG,OAAAC,2BAAAlQ,MAAA8P,OAAAK,WAAAC,OAAAC,eAAAP,SAAApQ,KAAAM,KAC5CkN,MAD4C,OAGlD+C,OAAK7C,EAAIA,EACT6C,MAAK5C,EAAIA,EAET4C,MAAKzC,EAAI,GACTyC,MAAKjF,EAAI,GAETiF,MAAKK,UAAY,GAAIC,QAAOC,MAAM,sBATgBP,2FAc9CjQ,KAAKkN,KAAKuD,KAAK,MACjBzQ,KAAKsN,IAAM,GAGTtN,KAAKkN,KAAKuD,KAAK,MAEjBzQ,KAAKsN,IAAM,GAGRtN,KAAKkN,KAAKuD,KAAK,KAAQzQ,KAAKkN,KAAKuD,KAAK,MAEzCzQ,KAAKsN,KAAM,EAAAP,MAAAW,MAAK1N,KAAKsN,KAAM,IAGzBtN,KAAK0Q,UAAY1Q,KAAKkN,KAAKuD,KAAK,MAElCzQ,KAAKuN,IAAK,EACVvN,KAAKsQ,UAAUK,QAGjB3Q,KAAKsN,GAAKrN,KAAKI,IAAIL,KAAKsN,GAAK,GAC7BtN,KAAKsN,GAAKrN,KAAKG,IAAIJ,KAAKsN,IAAI,GAC5BtN,KAAKuN,GAAKtN,KAAKI,IAAIL,KAAKuN,GAAK,GAE7BvN,KAAKuN,IAAM,IAGXvN,KAAKiP,OAAO2B,MAAQ,GAAIC,OAGxBC,KAAAhB,OAAAiB,UAAAZ,WAAAC,OAAAC,eAAAP,OAAAiB,WAAA,SAAA/Q,MAAAN,KAAAM,kBA/CwBiN,y2CCxJ5BJ,KAAA1N,QAAA,SACA2N,oCAAA3N,QAAA,gDAIqB6R,iBAUnB,QAAAA,OACE9D,MAIA,GAHA+D,IAGAlB,UAAApQ,OAAA,GAAAqQ,SAAAD,UAAA,GAAAA,UAAA,IAHwB,EAAG,GAC3BmB,UAEAnB,UAAA,GADAoB,QACApB,UAAA,EAAA5C,iBAAAnN,KAAAgR,OACAhR,KAAKiR,GAAKA,GACVjR,KAAKkN,KAAOA,KAEZlN,KAAKmR,QAAUA,QAGfnR,KAAKoR,UAEL,KAAK,GADDC,MAAOH,UAAUI,MAAM,MAClBjE,EAAI,EAAGA,EAAIgE,KAAK1R,OAAQ0N,IAAK,CACpCrN,KAAKoR,QAAQ/D,KAEb,KAAK,GADDkE,KAAMF,KAAKhE,GACND,EAAI,EAAGA,EAAImE,IAAI5R,OAAQyN,IAAK,CACnC,GAAIuC,MAAO3B,OAAAC,QAAKuD,IAAID,IAAInE,GAExBuC,MAAKvC,EAAIA,EACTuC,KAAKtC,EAAIA,EACTsC,KAAKzC,KAAOA,KACZyC,KAAK8B,QAAS,EAEdzR,KAAKoR,QAAQ/D,GAAGpB,KAAK0D,OAIzB3P,KAAKwN,EAAI6D,KAAK1R,OACdK,KAAKgL,EAAIqG,KAAK,GAAG1R,iEAGV,GAAA+R,4BAAA,EAAAC,mBAAA,EAAAC,eAAA5B,MAAA,KAEP,IAAA,GAAA6B,OAAAC,UAAgB9R,KAAKoR,QAArBW,OAAAC,cAAAN,2BAAAG,MAAAC,UAAAG,QAAAC,MAAAR,2BAAA,EAA8B,CAAA,GAArBH,KAAqBM,MAAAxH,MAAA8H,4BAAA,EAAAC,oBAAA,EAAAC,gBAAArC,MAAA,KAC5B,IAAA,GAAAsC,QAAAC,WAAiBhB,IAAjBQ,OAAAC,cAAAG,4BAAAG,OAAAC,WAAAN,QAAAC,MAAAC,4BAAA,EAAsB,CAAA,GAAbxC,MAAa2C,OAAAjI,KAChBsF,MAAKnB,GAAGgE,QAAQ7C,KAAKnB,GAAGgE,OAAO9D,MAAMiB,OAFf,MAAA8C,KAAAL,oBAAA,EAAAC,gBAAAI,IAAA,QAAA,KAAAN,4BAAAI,WAAAG,QAAAH,WAAAG,SAAA,QAAA,GAAAN,mBAAA,KAAAC,oBAFvB,MAAAI,KAAAd,mBAAA,EAAAC,eAAAa,IAAA,QAAA,KAAAf,2BAAAI,UAAAY,QAAAZ,UAAAY,SAAA,QAAA,GAAAf,kBAAA,KAAAC,iDAWP,GAAMjD,KAAM3O,KAAKkN,KAAK0B,OAAOC,WAAW,KACxC,IAAMF,cAAeG,0BAOrB,IAAK,GALC6D,YAAa,EACbC,WAAa,EACbC,SAAW,GACXC,SAAW,GAERzF,EAAIuF,WAAYvF,EAAIyF,SAAUzF,IACrC,IAAK,GAAID,GAAIuF,WAAYvF,EAAIyF,SAAUzF,IAAK,CAC1C,GAAIuC,MAAO3P,KAAKuO,QAAQnB,EAAGC,IADe0F,qBAGnB/S,KAAKgT,qBAAqB5F,EAAGC,IAHV4F,sBAAAC,eAAAH,qBAAA,GAGnCI,MAHmCF,sBAAA,GAG5BG,MAH4BH,sBAAA,GAAAI,eAAAH,eAInBvD,KAAK2D,SAJc,GAInCC,MAJmCF,eAAA,GAI5BG,MAJ4BH,eAAA,EAK1C1E,KAAI8E,UACFzT,KAAKmR,QACLoC,MAAQvF,OAAAC,QAAKC,KAAMsF,MAAQxF,OAAAC,QAAKC,KAChCF,OAAAC,QAAKC,KAAMF,OAAAC,QAAKC,KAEhBiF,MAAOC,MAAOpF,OAAAC,QAAKC,KAAMF,OAAAC,QAAKC,4CAMiB,GAAAwF,OAAAR,eAAAS,KAAA,GAA/CJ,MAA+CG,MAAA,GAAhCF,MAAgCE,MAAA,EACrDH,OAAQtT,KAAKE,MAAMoT,OACnBC,MAAQvT,KAAKE,MAAMqT,MAEnB,KACE,GAAI1U,GAAIkB,KAAKoR,QAAQoC,OAAOD,MAC5B,IAAgB,mBAANzU,GAAmB,KAAM,MACnC,OAAOA,GACP,MAAMH,GAGN,MADAgC,SAAQiT,KAAR,aAA0BL,MAA1B,KAAoCC,MAApC,8BACOxF,OAAAC,QAAKuD,IAAI,gDAIkCqC,SAAqB,GAAAC,OAAAZ,eAAAa,MAAA,GAA9DR,MAA8DO,MAAA,GAA/CN,MAA+CM,MAAA,EACzED,SAAQzG,EAAImG,MACZM,QAAQxG,EAAImG,MACZK,QAAQ3G,KAAOlN,KAAKkN,KACpB2G,QAAQpC,QAAS,CAEjB,IAAIuC,SAAUhU,KAAKuO,QAAQgF,MAAOC,OAOlC,OANAQ,SAAQvC,QAAS,EACbuC,QAAQxF,GAAGyF,QAAQD,QAAQxF,GAAGyF,OAAOvF,MAAMsF,SAE/ChU,KAAKoR,QAAQoC,OAAOD,OAASM,QACzBA,QAAQrF,GAAGyF,QAAQJ,QAAQrF,GAAGyF,OAAOvF,MAAMsF,SAExCH,2DAK+C,GAAAK,OAAAhB,eAAAiB,MAAA,GAAnCZ,MAAmCW,MAAA,GAA5BV,MAA4BU,MAAA,EACtD,QACEjU,KAAKE,MAAMoT,MAAQvF,OAAAC,QAAKC,MACxBjO,KAAKE,MAAMqT,MAAQxF,OAAAC,QAAKC,oCAnHT8C,u1BCIrBlE,MAAA3N,QAAA,UACAiV,sCAAAjV,QAAA,mDACAkV,QAAAlV,QAAA,YAJMsN,UAAYtN,QAAQ,cAMLmV,eAiBnB,QAAAA,KAAYpD,UAAmBC,SAAgB,GAAAlB,OAAAjQ,IAAAmN,iBAAAnN,KAAAsU,KAC7CtU,KAAKyQ,QAELzQ,KAAK4O,OAAS2F,SAASC,cAAc,UACrCxU,KAAK4O,OAAO6F,MAAQ,IACpBzU,KAAK4O,OAAO8F,OAAS,IAErB1U,KAAK4O,OAAO+F,iBAAiB,UAAW,SAACC,KACvC3E,MAAKQ,KAAKmE,IAAIC,UAAW,IAG3B7U,KAAK4O,OAAO+F,iBAAiB,QAAS,SAACC,KACrC3E,MAAKQ,KAAKmE,IAAIC,UAAW,IAG3B7U,KAAK4O,OAAOkG,aAAa,WAAY,KAErC9U,KAAK+U,OAAS,GAAAV,SAAAvE,OAAW9P,KAAM,GAAI,IAGnCA,KAAKgV,QAAU,EAAG,GAElBhV,KAAKsO,MAAQ,GAAA2G,SAAAhH,QAAUjO,MAAO,EAAG,GAAIyM,UAAUyE,WAAYC,QAtBd,IAAAO,4BAAA,EAAAC,mBAAA,EAAAC,eAAA5B,MAAA,KAyB7C,IAAA,GAAA6B,OAAAC,UAAgB9R,KAAKsO,MAAM8C,QAA3BW,OAAAC,cAAAN,2BAAAG,MAAAC,UAAAG,QAAAC,MAAAR,2BAAA,EAAoC,CAAA,GAA3BH,KAA2BM,MAAAxH,MAAA8H,4BAAA,EAAAC,oBAAA,EAAAC,gBAAArC,MAAA,KAClC,IAAA,GAAAsC,QAAAC,WAAiBhB,IAAjBQ,OAAAC,cAAAG,4BAAAG,OAAAC,WAAAN,QAAAC,MAAAC,4BAAA,EAAsB,CAAA,GAAbxC,MAAa2C,OAAAjI,KAChBsF,MAAKnB,GAAGyF,QAAQtE,KAAKnB,GAAGyF,OAAOvF,MAAMiB,OAFT,MAAA8C,KAAAL,oBAAA,EAAAC,gBAAAI,IAAA,QAAA,KAAAN,4BAAAI,WAAAG,QAAAH,WAAAG,SAAA,QAAA,GAAAN,mBAAA,KAAAC,oBAzBS,MAAAI,KAAAd,mBAAA,EAAAC,eAAAa,IAAA,QAAA,KAAAf,2BAAAI,UAAAY,QAAAZ,UAAAY,SAAA,QAAA,GAAAf,kBAAA,KAAAC,+EAkC7C,GAAMjD,KAAM3O,KAAK4O,OAAOC,WAAW,KAE/BF,eAAeG,4BACjBH,IAAII,UAAY,UAChBJ,IAAIK,SAAS,EAAG,EAAGhP,KAAK4O,OAAO6F,MAAOzU,KAAK4O,OAAO8F,oCAvDnCJ,04BCbrBzH,KAAA1N,QAAA,SAGqB+V,8CA+BnB,QAAAA,MAAYC,OAAehI,gBAAAnN,KAAAkV,MACzBlV,KAAKoV,KAAOD,MAAMC,MAAQ,UAC1BpV,KAAKsT,SAAW6B,MAAM7B,SACtBtT,KAAK4P,MAAQuF,MAAMvF,QAAS,EAC5B5P,KAAKwO,GAAK2G,MAAM3G,OAChBxO,KAAKyR,QAAS,2DAML4D,KACT,GAAI1F,MAAOyB,QAAQI,IAAI6D,IAEvB,IAAG1F,KAAM,MAAOA,KACX,MAAM,IAAI2F,YAAW,QAAUD,IAAM,4CA9CzBH,IA4Dd,IAAM9D,SAAA3R,QAAA2R,QAA8B,GAAImE,OAC5C,IAAK,GAAIL,OACRE,KAAM,SACN9B,UAAW,EAAG,GACd1D,OAAO,EACPpB,IACEyF,OADE,WAKA,GAAIuB,SAAaxV,KAAKkN,KAAKoB,MAAMC,QAAQvO,KAAKoN,EAAGpN,KAAKqN,EAAI,IACtDoI,WAAazV,KAAKkN,KAAKoB,MAAMC,QAAQvO,KAAKoN,EAAGpN,KAAKqN,EAAI,IACtDqI,SAAa1V,KAAKkN,KAAKoB,MAAMC,QAAQvO,KAAKoN,EAAI,EAAGpN,KAAKqN,IACtDsI,UAAa3V,KAAKkN,KAAKoB,MAAMC,QAAQvO,KAAKoN,EAAI,EAAGpN,KAAKqN,IAEtDe,IAASoH,QAAQJ,OAASpV,KAAKoV,KAC/B7F,OAASkG,aAAiBzV,KAAKoV,KAC/BrH,KAAS2H,WAAiB1V,KAAKoV,KAC/BhG,MAASuG,YAAiB3V,KAAKoV,IAEhChH,MAAOL,MAAQqB,OAASG,SAAQvP,KAAKsT,UAAY,EAAG,KACnDlF,KAAOL,MAAQqB,OAASG,SAAQvP,KAAKsT,UAAY,EAAG,KACpDlF,MAAQL,MAAQqB,OAASG,SAAQvP,KAAKsT,UAAY,EAAG,KACrDlF,KAAOL,OAASqB,OAASG,SAAQvP,KAAKsT,UAAY,EAAG,IAErDlF,KAAQL,MAASqB,QAASG,SAAQvP,KAAKsT,UAAY,EAAG,IAG1D3S,QAAQiV,IAAIJ,QAASE,SAAUC,UAAWF,WAAYzV,KAAKsT,gBAKhE,IAAK,GAAI4B,OACRE,KAAM,UACN9B,UAAW,EAAG,GACd1D,OAAO,EACPpB,IACEyF,OADE,WAEAjU,KAAKZ,EAAI,GAGXoT,OALE,WAMAxS,KAAKZ,GAAK,GACPY,KAAKZ,GAAK,IAAGY,KAAKZ,EAAI,GAEzBY,KAAKsT,SAAS,GAAKrT,KAAKG,IAAIH,KAAKE,MAAMH,KAAKZ,GAAI,IAGlDqP,WAZE,WAaA,GAAI8B,QAAOC,MAAM,gCAAgCG,OACjD3Q,KAAKkN,KAAKoB,MAAMuH,aAAa7V,KAAKoN,EAAGpN,KAAKqN,GAAI6H,KAAK1D,IAAI,YAK5D,IAAK,GAAI0D,OACRE,KAAM,MACN9B,UAAW,EAAG,OAGf,IAAK,GAAI4B,OACRE,KAAM,iBACN9B,UAAW,EAAG,GACd1D,OAAO,MAGR,IAAK,GAAIsF,OACRE,KAAM,OACN9B,UAAW,EAAG,OAGf,IAAK,GAAI4B,OACRE,KAAM,OACN9B,UAAW,EAAG,GACd9E,IACEyF,OADE,WAEAjU,KAAKZ,EAAI,GAGXoT,OALE,WAMAxS,KAAKZ,GAAK,KACPY,KAAKZ,GAAK,IAAGY,KAAKZ,EAAI,GAEzBY,KAAKsT,SAAS,GAAKrT,KAAKG,IAAIH,KAAKE,MAAMH,KAAKZ,GAAI,SAQxD8V,MAAKhH,KAAO,oJC7JZ,GAAArB,MAAA1N,QAAA,2CAEAoR,QAAOoE,iBAAiB,OAAQ,SAAAhW,GAC9B,GAAIwS,SAAU,GAAIN,MAElBM,SAAQ2E,OAAS,WACf,GAAM5I,MAAO,GAAA6I,OAAA9H,QAAA,uYAiBOkD,QAEpBZ,QAAOrD,KAAOA,KACdqH,SAASyB,KAAKC,YAAY/I,KAAK0B,QAE/B1B,KAAKiE,QAAUA,QACfjE,KAAK0B,OAAOsH,SAIV,QAASC,UACTC,sBAAsBD,QAEnB5B,SAAS8B,aACVnJ,KAAKoJ,cAELpJ,KAAKoB,MAAMkE,SACXtF,KAAKoB,MAAMiI,OAEXrJ,KAAK6H,OAAOvC,SACZtF,KAAK6H,OAAOwB,YAKlBpF,QAAQqF,IAAM,8EC5CT,SAAS9I,MAAK7O,GACnB,MAAIA,GAAI,EAAU,EACdA,EAAI,GAAU,EACX,iEAHO6O,KAAAA","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!Please JS v0.4.2, Jordan Checkman 2014, Checkman.io, MIT License, Have fun.*/\n!function(e,r,a){\"function\"==typeof define&&define.amd?define([],a):\"object\"==typeof exports?module.exports=a():r[e]=a()}(\"Please\",this,function(){\"use strict\";function e(){function e(e,r,a){var o=Math.random;return a instanceof l&&(o=a.random),Math.floor(o()*(r-e+1))+e}function r(e,r,a){var o=Math.random;return a instanceof l&&(o=a.random),o()*(r-e)+e}function a(e,r,a){return Math.max(r,Math.min(e,a))}function o(e,r){var a;switch(e){case\"hex\":for(a=0;a<r.length;a++)r[a]=F.HSV_to_HEX(r[a]);break;case\"rgb\":for(a=0;a<r.length;a++)r[a]=F.HSV_to_RGB(r[a]);break;case\"rgb-string\":for(a=0;a<r.length;a++){var o=F.HSV_to_RGB(r[a]);r[a]=\"rgb(\"+o.r+\",\"+o.g+\",\"+o.b+\")\"}break;case\"hsv\":break;default:console.error(\"Format not recognized.\")}return r}function n(e){var r=F.HSV_to_RGB(e),a=(299*r.r+587*r.g+114*r.b)/1e3;return a>=128?\"dark\":\"light\"}function t(e){var r={};for(var a in e)e.hasOwnProperty(a)&&(r[a]=e[a]);return r}function l(e){function r(){o=(o+1)%256,n=(n+a[o])%256;var e=a[o];return a[o]=a[n],a[n]=e,a[(a[o]+a[n])%256]}for(var a=[],o=0,n=0,t=0;256>t;t++)a[t]=t;for(var l=0,F=0;256>l;l++){F=(F+a[l]+e.charCodeAt(l%e.length))%256;var s=a[l];a[l]=a[F],a[F]=s}this.random=function(){for(var e=0,a=0,o=1;8>e;e++)a+=r()*o,o*=256;return a/0x10000000000000000}}var F={},s={aliceblue:\"F0F8FF\",antiquewhite:\"FAEBD7\",aqua:\"00FFFF\",aquamarine:\"7FFFD4\",azure:\"F0FFFF\",beige:\"F5F5DC\",bisque:\"FFE4C4\",black:\"000000\",blanchedalmond:\"FFEBCD\",blue:\"0000FF\",blueviolet:\"8A2BE2\",brown:\"A52A2A\",burlywood:\"DEB887\",cadetblue:\"5F9EA0\",chartreuse:\"7FFF00\",chocolate:\"D2691E\",coral:\"FF7F50\",cornflowerblue:\"6495ED\",cornsilk:\"FFF8DC\",crimson:\"DC143C\",cyan:\"00FFFF\",darkblue:\"00008B\",darkcyan:\"008B8B\",darkgoldenrod:\"B8860B\",darkgray:\"A9A9A9\",darkgrey:\"A9A9A9\",darkgreen:\"006400\",darkkhaki:\"BDB76B\",darkmagenta:\"8B008B\",darkolivegreen:\"556B2F\",darkorange:\"FF8C00\",darkorchid:\"9932CC\",darkred:\"8B0000\",darksalmon:\"E9967A\",darkseagreen:\"8FBC8F\",darkslateblue:\"483D8B\",darkslategray:\"2F4F4F\",darkslategrey:\"2F4F4F\",darkturquoise:\"00CED1\",darkviolet:\"9400D3\",deeppink:\"FF1493\",deepskyblue:\"00BFFF\",dimgray:\"696969\",dimgrey:\"696969\",dodgerblue:\"1E90FF\",firebrick:\"B22222\",floralwhite:\"FFFAF0\",forestgreen:\"228B22\",fuchsia:\"FF00FF\",gainsboro:\"DCDCDC\",ghostwhite:\"F8F8FF\",gold:\"FFD700\",goldenrod:\"DAA520\",gray:\"808080\",grey:\"808080\",green:\"008000\",greenyellow:\"ADFF2F\",honeydew:\"F0FFF0\",hotpink:\"FF69B4\",indianred:\"CD5C5C\",indigo:\"4B0082\",ivory:\"FFFFF0\",khaki:\"F0E68C\",lavender:\"E6E6FA\",lavenderblush:\"FFF0F5\",lawngreen:\"7CFC00\",lemonchiffon:\"FFFACD\",lightblue:\"ADD8E6\",lightcoral:\"F08080\",lightcyan:\"E0FFFF\",lightgoldenrodyellow:\"FAFAD2\",lightgray:\"D3D3D3\",lightgrey:\"D3D3D3\",lightgreen:\"90EE90\",lightpink:\"FFB6C1\",lightsalmon:\"FFA07A\",lightseagreen:\"20B2AA\",lightskyblue:\"87CEFA\",lightslategray:\"778899\",lightslategrey:\"778899\",lightsteelblue:\"B0C4DE\",lightyellow:\"FFFFE0\",lime:\"00FF00\",limegreen:\"32CD32\",linen:\"FAF0E6\",magenta:\"FF00FF\",maroon:\"800000\",mediumaquamarine:\"66CDAA\",mediumblue:\"0000CD\",mediumorchid:\"BA55D3\",mediumpurple:\"9370D8\",mediumseagreen:\"3CB371\",mediumslateblue:\"7B68EE\",mediumspringgreen:\"00FA9A\",mediumturquoise:\"48D1CC\",mediumvioletred:\"C71585\",midnightblue:\"191970\",mintcream:\"F5FFFA\",mistyrose:\"FFE4E1\",moccasin:\"FFE4B5\",navajowhite:\"FFDEAD\",navy:\"000080\",oldlace:\"FDF5E6\",olive:\"808000\",olivedrab:\"6B8E23\",orange:\"FFA500\",orangered:\"FF4500\",orchid:\"DA70D6\",palegoldenrod:\"EEE8AA\",palegreen:\"98FB98\",paleturquoise:\"AFEEEE\",palevioletred:\"D87093\",papayawhip:\"FFEFD5\",peachpuff:\"FFDAB9\",peru:\"CD853F\",pink:\"FFC0CB\",plum:\"DDA0DD\",powderblue:\"B0E0E6\",purple:\"800080\",rebeccapurple:\"663399\",red:\"FF0000\",rosybrown:\"BC8F8F\",royalblue:\"4169E1\",saddlebrown:\"8B4513\",salmon:\"FA8072\",sandybrown:\"F4A460\",seagreen:\"2E8B57\",seashell:\"FFF5EE\",sienna:\"A0522D\",silver:\"C0C0C0\",skyblue:\"87CEEB\",slateblue:\"6A5ACD\",slategray:\"708090\",slategrey:\"708090\",snow:\"FFFAFA\",springgreen:\"00FF7F\",steelblue:\"4682B4\",tan:\"D2B48C\",teal:\"008080\",thistle:\"D8BFD8\",tomato:\"FF6347\",turquoise:\"40E0D0\",violet:\"EE82EE\",wheat:\"F5DEB3\",white:\"FFFFFF\",whitesmoke:\"F5F5F5\",yellow:\"FFFF00\",yellowgreen:\"9ACD32\"},i=.618033988749895,u={hue:null,saturation:null,value:null,base_color:\"\",greyscale:!1,grayscale:!1,golden:!0,full_random:!1,colors_returned:1,format:\"hex\",seed:null},c={scheme_type:\"analogous\",format:\"hex\"},h={golden:!1,format:\"hex\"};return F.NAME_to_HEX=function(e){return e=e.toLowerCase(),e in s?s[e]:(console.error(\"Color name not recognized.\"),void 0)},F.NAME_to_RGB=function(e){return F.HEX_to_RGB(F.NAME_to_HEX(e))},F.NAME_to_HSV=function(e){return F.HEX_to_HSV(F.NAME_to_HEX(e))},F.HEX_to_RGB=function(e){var r=/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;e=e.replace(r,function(e,r,a,o){return r+r+a+a+o+o});var a=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(e);return a?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16)}:null},F.RGB_to_HEX=function(e){return\"#\"+((1<<24)+(e.r<<16)+(e.g<<8)+e.b).toString(16).slice(1)},F.HSV_to_RGB=function(e){var r,a,o,n,t,l,F,s,i=e.h,u=e.s,c=e.v;if(0===u)return{r:c,g:c,b:c};switch(i/=60,n=Math.floor(i),t=i-n,l=c*(1-u),F=c*(1-u*t),s=c*(1-u*(1-t)),n){case 0:r=c,a=s,o=l;break;case 1:r=F,a=c,o=l;break;case 2:r=l,a=c,o=s;break;case 3:r=l,a=F,o=c;break;case 4:r=s,a=l,o=c;break;case 5:r=c,a=l,o=F}return{r:Math.floor(255*r),g:Math.floor(255*a),b:Math.floor(255*o)}},F.RGB_to_HSV=function(e){var r=e.r/255,a=e.g/255,o=e.b/255,n=0,t=0,l=0,F=Math.min(r,Math.min(a,o)),s=Math.max(r,Math.max(a,o));if(F===s)return l=F,{h:0,s:0,v:l};var i=r===F?a-o:o===F?r-a:o-r,u=r===F?3:o===F?1:5;return n=60*(u-i/(s-F)),t=(s-F)/s,l=s,{h:n,s:t,v:l}},F.HSV_to_HEX=function(e){return F.RGB_to_HEX(F.HSV_to_RGB(e))},F.HEX_to_HSV=function(e){return F.RGB_to_HSV(F.HEX_to_RGB(e))},F.make_scheme=function(e,r){function n(e){return{h:e.h,s:e.s,v:e.v}}var l,F,s,i,u,h=t(c);if(null!==r)for(var d in r)r.hasOwnProperty(d)&&(h[d]=r[d]);var g=[e];switch(h.scheme_type.toLowerCase()){case\"monochromatic\":case\"mono\":for(u=1;2>=u;u++)l=n(e),s=l.s+.1*u,s=a(s,0,1),i=l.v+.1*u,i=a(i,0,1),l.s=s,l.v=i,g.push(l);for(u=1;2>=u;u++)l=n(e),s=l.s-.1*u,s=a(s,0,1),i=l.v-.1*u,i=a(i,0,1),l.s=s,l.v=i,g.push(l);break;case\"complementary\":case\"complement\":case\"comp\":l=n(e),l.h=(l.h+180)%360,g.push(l);break;case\"split-complementary\":case\"split-complement\":case\"split\":l=n(e),l.h=(l.h+165)%360,g.push(l),l=n(e),l.h=Math.abs((l.h-165)%360),g.push(l);break;case\"double-complementary\":case\"double-complement\":case\"double\":l=n(e),l.h=(l.h+180)%360,g.push(l),l.h=(l.h+30)%360,F=n(l),g.push(l),l.h=(l.h+180)%360,g.push(F);break;case\"analogous\":case\"ana\":for(u=1;5>=u;u++)l=n(e),l.h=(l.h+20*u)%360,g.push(l);break;case\"triadic\":case\"triad\":case\"tri\":for(u=1;3>u;u++)l=n(e),l.h=(l.h+120*u)%360,g.push(l);break;default:console.error(\"Color scheme not recognized.\")}return o(h.format.toLowerCase(),g),g},F.make_color=function(n){var s=[],c=t(u),h=null;if(null!==n)for(var d in n)n.hasOwnProperty(d)&&(c[d]=n[d]);var g=null;\"string\"==typeof c.seed&&(g=new l(c.seed)),c.base_color.length>0&&(h=c.base_color.match(/^#?([0-9a-f]{3})([0-9a-f]{3})?$/i)?F.HEX_to_HSV(c.base_color):F.NAME_to_HSV(c.base_color));for(var m=0;m<c.colors_returned;m++){var f,E,b,p=e(0,360,g);null!==h?(f=a(e(h.h-5,h.h+5,g),0,360),E=0===h.s?0:r(.4,.85,g),b=r(.4,.85,g),s.push({h:f,s:E,v:b})):(f=c.greyscale===!0||c.grayscale===!0?0:c.golden===!0?(p+p/i)%360:null===c.hue||c.full_random===!0?p:a(c.hue,0,360),E=c.greyscale===!0||c.grayscale===!0?0:c.full_random===!0?r(0,1,g):null===c.saturation?.4:a(c.saturation,0,1),b=c.full_random===!0?r(0,1,g):c.greyscale===!0||c.grayscale===!0?r(.15,.75,g):null===c.value?.75:a(c.value,0,1),s.push({h:f,s:E,v:b}))}return o(c.format.toLowerCase(),s),s},F.make_contrast=function(e,r){var l=t(h);if(null!==r)for(var s in r)r.hasOwnProperty(s)&&(l[s]=r[s]);var u,c,d=n(e);if(l.golden===!0)c=e.h*(1+i)%360;else{var g=F.make_scheme(e,{scheme_type:\"complementary\",format:\"hsv\"})[1];c=a(g.h-30,0,360)}var m;return\"dark\"===d?m=a(e.v-.25,0,1):\"light\"===d&&(m=a(e.v+.25,0,1)),u=[{h:c,s:e.s,v:m}],o(l.format.toLowerCase(),u),u[0]},F}return e()});","'use strict';\n\n/*\n * Constants.\n */\n\nvar WHITE_SPACE_COLLAPSABLE_LINE = /[ \\t]*\\n+[ \\t]*/g;\nvar LINE = '\\n';\n\n/**\n * Remove initial and final spaces and tabs at the\n * line breaks in `value`. Does not trim initial and\n * final spaces and tabs of the value itself.\n *\n * @example\n *   trimLines(' foo\\t\\n\\n bar \\n\\tbaz '); // ' foo\\nbar\\nbaz '\n *\n * @param {string} value - Value with untrimmed line breaks,\n *   coerced to string.\n * @return {string} - Value with trimmed line breaks.\n */\nfunction trimLines(value) {\n    return String(value).replace(WHITE_SPACE_COLLAPSABLE_LINE, LINE);\n}\n\n/*\n * Expose.\n */\n\nmodule.exports = trimLines;\n","// @flow\n\n// show bounding boxes, among other things\nconst DEBUG = true\n\nimport SLW from './SLW'\nimport Tile from './Tile'\n\nimport { sign } from './util'\n\nexport default class Entity {\n  game: SLW\n\n  // Position, absolute (not tileX/Y!)\n  x: number\n  y: number\n\n  // Velocity\n  xv: number\n  yv: number\n\n  // Dimensions (used for bounding box)\n  w: number // width\n  h: number // height\n\n  color: string // \"rgba(r, g, b, a)\"\n  sprite: {\n    sheet: Image,\n    position: Position,\n  }\n\n  get top(): number {\n    return Math.floor(this.y)\n  }\n\n  get bottom(): number {\n    return Math.floor(this.y + this.h)\n  }\n\n  get left(): number {\n    return Math.floor(this.x)\n  }\n\n  get right(): number {\n    return Math.floor(this.x + this.w)\n  }\n\n  constructor(game: SLW) {\n    this.game = game\n\n    this.x = 0\n    this.y = 0\n\n    this.xv = 0\n    this.yv = 0\n\n    this.w = 16\n    this.h = 16\n\n    // pleasing color for debugging reasons :P\n    const c = require('pleasejs').make_color({ format: 'rgb' })[0]\n    this.color = `rgba(${c.r}, ${c.g}, ${c.b}, 0.75)`\n  }\n\n  update() {\n    let v: number = 0\n\n    // x:\n    const xv = Math.floor(this.xv)\n    v = sign(xv)\n\n    for (let i = 0; i < Math.abs(xv); i++) {\n      this.x += v\n      if (this.collides) {\n        this.x -= v\n        this.xv = 0\n      }\n    }\n\n    // y:\n    const yv = Math.floor(this.yv)\n    v = sign(yv)\n\n    for (let i = 0; i < Math.abs(yv); i++) {\n      this.y += v\n      if (this.collides) {\n        this.y -= v\n        this.yv = 0\n\n        const tileAboveX = Math.round(this.left / Tile.size)\n        const tileAboveY = this.top / Tile.size - 1\n        const tileAbove = this.game.level.tileAt([tileAboveX, tileAboveY])\n\n        if (tileAbove.on.airPunched) {\n          tileAbove.on.airPunched.apply(tileAbove)\n        }\n      }\n    }\n  }\n\n  draw() {\n    const ctx = this.game.canvas.getContext('2d')\n    if (!(ctx instanceof CanvasRenderingContext2D)) return\n\n    if (DEBUG) {\n      // Draw the bounding box (if in DEBUG mode).\n      ctx.fillStyle = this.color\n      ctx.fillRect(this.left, this.top, this.w + 1, this.h + 1)\n    }\n\n    if (this.sprite) {\n      // Draw the sprite image (if there is one).\n\n    }\n  }\n\n  // Are we currently intersecting any solid Tiles?\n  get collides(): boolean {\n    let tileLeft   = Math.floor(this.left   / Tile.size)\n    let tileRight  = Math.floor(this.right  / Tile.size)\n    let tileTop    = Math.floor(this.top    / Tile.size)\n    let tileBottom = Math.floor(this.bottom / Tile.size)\n\n    const levelWidth  = this.game.level.w\n    const levelHeight = this.game.level.h\n\n    if (tileLeft < 0)             tileLeft = 0\n    if (tileRight > levelWidth)   tileRight = levelWidth\n    if (tileTop < 0)              tileTop = 0\n    if (tileBottom > levelHeight) tileBottom = levelHeight\n\n    let collision = false\n    for (let x = tileLeft; x <= tileRight; x++) {\n      for (let y = tileTop; y <= tileBottom; y++) {\n        let tile = this.game.level.tileAt([x, y])\n\n        if (tile.solid) collision = true\n      }\n    }\n\n    return collision\n  }\n\n  // Whether or not the entity is on the ground or not.\n  get grounded(): boolean {\n    // Check if either the tile below the player to the LEFT or the tile below\n    // the player to the RIGHT is solid.\n    return (\n      this.game.level.tileAt([Math.floor(this.x / 16), this.bottom / 16 + 0.1]).solid ||\n      this.game.level.tileAt([Math.ceil(this.x / 16), this.bottom / 16 + 0.1]).solid\n    )\n  }\n}\n\nexport class Player extends Entity {\n  jumpSound: window.Audio\n\n  constructor(game: SLW, x: number = 0, y:number = 0) {\n    super(game)\n\n    this.x = x\n    this.y = y\n\n    this.w = 16\n    this.h = 24\n\n    this.jumpSound = new window.Audio('sound/smw_jump.wav')\n  }\n\n  update() {\n    // input:\n    if (this.game.keys[39]) {\n      this.xv += 1\n    }\n\n    if (this.game.keys[37]) {\n      // xv\n      this.xv -= 1\n    }\n\n    if (!this.game.keys[39] && !this.game.keys[37]) {\n      // slow down\n      this.xv += sign(this.xv) * -0.5\n    }\n\n    if (this.grounded && this.game.keys[32]) {\n      // jump\n      this.yv = -4\n      this.jumpSound.play()\n    }\n\n    this.xv = Math.min(this.xv,  3)\n    this.xv = Math.max(this.xv, -3)\n    this.yv = Math.min(this.yv,  4)\n\n    this.yv += 0.25 // TODO actual gravity\n\n    // rendering:\n    this.sprite.sheet = new Image()\n\n    // actually move:\n    super.update()\n  }\n}\n","// @flow\n\nimport SLW from './SLW'\nimport Tile from './Tile'\n\ntype Position = [number, number]\n\nexport default class Level {\n  id: [number, number]\n  game: SLW\n\n  tileset: Image\n  tilemap: Array <Array <Tile>>\n\n  w: number // width\n  h: number // height\n\n  constructor(\n    game: SLW,\n    id: [number, number] = [1, 1],\n    leveldata: string,\n    tileset: Image,\n  ) {\n    this.id = id\n    this.game = game\n\n    this.tileset = tileset\n\n    // Convert tilemap into a 2D array of Tiles:\n    this.tilemap = []\n    let rows = leveldata.split('\\n')\n    for (let y = 0; y < rows.length; y++) {\n      this.tilemap[y] = []\n      let row = rows[y]\n      for (let x = 0; x < row.length; x++) {\n        let tile = Tile.get(row[x])\n\n        tile.x = x\n        tile.y = y\n        tile.game = game\n        tile.exists = true\n\n        this.tilemap[y].push(tile)\n      }\n    }\n\n    this.w = rows.length\n    this.h = rows[0].length\n  }\n\n  update() {\n    // Call update() on the tilemap's Tiles\n    for (let row of this.tilemap) {\n      for (let tile of row) {\n        if (tile.on.update) tile.on.update.apply(tile)\n      }\n    }\n  }\n\n  draw() {\n    // Draw the tilemap\n    const ctx = this.game.canvas.getContext('2d')\n    if (!(ctx instanceof CanvasRenderingContext2D)) return\n\n    const viewStartX = 0\n    const viewStartY = 0\n    const viewEndX = 16\n    const viewEndY = 16\n\n    for (let y = viewStartY; y < viewEndY; y++) {\n      for (let x = viewStartX; x < viewEndX; x++) {\n        let tile = this.tileAt([x, y])\n\n        const [rendX, rendY] = this.getAbsolutePosition([x, y])\n        const [tileX, tileY] = tile.position\n        ctx.drawImage(\n          this.tileset,\n          tileX * Tile.size, tileY * Tile.size,\n          Tile.size, Tile.size,\n\n          rendX, rendY, Tile.size, Tile.size)\n      }\n    }\n  }\n\n  // Get a Tile from its Position in the tilemap.\n  tileAt([tileX: number, tileY: number]: Position): Tile {\n    tileX = Math.floor(tileX)\n    tileY = Math.floor(tileY)\n\n    try {\n      let r = this.tilemap[tileY][tileX]\n      if(typeof r === 'undefined') throw 'nope'\n      return r\n    } catch(e) {\n      // fallback to void tile\n      console.warn(`Level.at([${tileX}, ${tileY}]) failed to retrieve Tile`)\n      return Tile.get(' ')\n    }\n  }\n\n  replaceTile([tileX: number, tileY: number]: Position, newTile: Tile): Tile {\n    newTile.x = tileX\n    newTile.y = tileY\n    newTile.game = this.game\n    newTile.exists = true\n\n    let oldTile = this.tileAt([tileX, tileY])\n    oldTile.exists = false\n    if (oldTile.on.create) oldTile.on.create.apply(oldTile)\n\n    this.tilemap[tileY][tileX] = newTile\n    if (newTile.on.create) newTile.on.create.apply(oldTile)\n\n    return newTile\n  }\n\n  // Gets the drawn position of a given tile position. For example, assuming\n  // that the tile size is 16, getDrawnPosition([0, 2]) would become [0, 32].\n  getAbsolutePosition([tileX, tileY]: Position): Position {\n    return [\n      Math.floor(tileX * Tile.size),\n      Math.floor(tileY * Tile.size)\n    ]\n  }\n}\n","// @flow\n\n// SUPER LIAM WORLD(tm)\n// totally not stolen from an-ok-squirrel.\n// this is a fair use of the name as specified\n// in NANALAND RULES NUMBER #99\n\ntype Position = [number, number]\n\nconst trimLines = require('trim-lines')\n\nimport Tile from './Tile'\nimport Level from './Level'\nimport { Player } from './Entity'\n\nexport default class SLW {\n  // Map to store key-pressed data in.\n  keys: Object\n\n  // Canvas used to display the game on.\n  canvas: HTMLCanvasElement\n\n  // Player object - the character that walks around the screen using the\n  // user's input as controls.\n  player: Player\n\n  // Camera object - where the camera is. TODO make this a class\n  camera: Position\n\n  // Level, to contain information about the currently active level.\n  level: Level\n\n  constructor(leveldata: string, tileset: Image) {\n    this.keys = {}\n\n    this.canvas = document.createElement('canvas')\n    this.canvas.width = 256\n    this.canvas.height = 256\n\n    this.canvas.addEventListener('keydown', (evt: KeyboardEvent) => {\n      this.keys[evt.keyCode] = true\n    })\n\n    this.canvas.addEventListener('keyup', (evt: KeyboardEvent) => {\n      this.keys[evt.keyCode] = false\n    })\n\n    this.canvas.setAttribute('tabindex', '1')\n\n    this.player = new Player(this, 16, 16)\n\n    // @TODO Camera:\n    this.camera = [0, 0]\n\n    this.level = new Level(this, [1, 1], trimLines(leveldata), tileset)\n\n    // Call create() on the Level tilemap\n    for (let row of this.level.tilemap) {\n      for (let tile of row) {\n        if (tile.on.create) tile.on.create.apply(tile)\n      }\n    }\n  }\n\n  // Clears the game canvas.\n  canvasClear() {\n    const ctx = this.canvas.getContext('2d')\n\n    if (ctx instanceof CanvasRenderingContext2D) {\n      ctx.fillStyle = '#f8e0b2'\n      ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n  }\n}\n","// @flow\n\nimport SLW from './SLW'\ntype Position = [number, number]\n\nexport default class Tile {\n  game: ?SLW\n\n  // Human-readable name\n  name: string\n\n  // Absolute [x, y] position in tileset.png\n  position: Position\n\n  // true if objects should collide with this tile\n  solid: boolean\n\n  x: ?number\n  y: ?number\n  exists: boolean\n\n  // Various interaction/event functions\n  on: {\n    // Called when this Tile comes into existence, e.g. the level loads.\n    create: Function,\n\n    // Called if and when this Tile is replaced with another.\n    destroy: Function,\n\n    // Called every frame.\n    update: Function,\n\n    // Air punched, e.g. hitting a question mark block.\n    airPunched: Function,\n  }\n\n  constructor(props: Object) {\n    this.name = props.name || 'Unknown'\n    this.position = props.position\n    this.solid = props.solid || false\n    this.on = props.on || {}\n    this.exists = false\n  }\n\n  static size: number\n\n  // Get a Tile from its String representation.\n  static get(str: string): Tile {\n    let tile = tilemap.get(str)\n\n    if(tile) return tile\n    else throw new RangeError('Tile ' + str + ' not found.')\n  }\n\n  /*\n  // Get a Tile from its Position in the activeLevel.\n  static at([tileX: number, tileY: number]): Tile {\n    const rows = window.game.activeLevel.tiles.split('\\n')\n    const tile = rows[Math.floor(tileY)][Math.floor(tileX)]\n\n    return Tile.get(tile)\n  }\n  */\n}\n\nexport const tilemap: Map <string, Tile> = new Map([\n  ['=', new Tile({\n    name: 'Ground',\n    position: [0, 0],\n    solid: true,\n    on: {\n      create() {\n        // we need to look at the adjacient tiles to figure out\n        // how we should be displayed:\n\n        let topTile    = this.game.level.tileAt([this.x, this.y - 1])\n        let bottomTile = this.game.level.tileAt([this.x, this.y + 1])\n        let leftTile   = this.game.level.tileAt([this.x - 1, this.y])\n        let rightTile  = this.game.level.tileAt([this.x + 1, this.y])\n\n        let top    = topTile.name === this.name\n        let bottom = bottomTile   === this.name\n        let left   = leftTile     === this.name\n        let right  = rightTile    === this.name\n\n        if(top && left && right && bottom) this.position = [6, 1]\n        if(!top && left && right && bottom) this.position = [5, 1]\n        if(!top && !left && right && bottom) this.position = [5, 0]\n        if(!top && left && !right && bottom) this.position = [5, 2]\n\n        if(!top && !left && !right && bottom) this.position = [3, 5]\n\n        // TODO add other states\n        console.log(topTile, leftTile, rightTile, bottomTile, this.position)\n      }\n    }\n  })],\n\n  ['?', new Tile({\n    name: '? Block',\n    position: [0, 4],\n    solid: true,\n    on: {\n      create() {\n        this.i = 0\n      },\n\n      update() {\n        this.i += 0.1\n        if(this.i >= 4) this.i = 0\n\n        this.position[0] = Math.max(Math.floor(this.i), 0)\n      },\n\n      airPunched() {\n        new window.Audio('sound/smw_shell_ricochet.wav').play()\n        this.game.level.replaceTile([this.x, this.y], Tile.get('x'))\n      }\n    },\n  })],\n\n  ['-', new Tile({\n    name: 'Air',\n    position: [2, 0],\n  })],\n\n  ['x', new Tile({\n    name: '? Block (Used)',\n    position: [4, 4],\n    solid: true,\n  })],\n\n  [' ', new Tile({\n    name: 'Void',\n    position: [0, 1],\n  })],\n\n  ['0', new Tile({\n    name: 'Coin',\n    position: [0, 3],\n    on: {\n      create() {\n        this.i = 0\n      },\n\n      update() {\n        this.i += 0.025\n        if(this.i >= 4) this.i = 0\n\n        this.position[0] = Math.max(Math.floor(this.i), 0)\n      },\n\n      // TODO touch() {}\n    }\n  })],\n])\n\nTile.size = 16\n","import SLW from './SLW'\n\nwindow.addEventListener('load', e => {\n  let tileset = new Image\n\n  tileset.onload = () => {\n    const game = new SLW(\n`--------------------\n --------------------\n --------------------\n --------------------\n ----------------===-\n -----00-------------\n ----0---------------\n ---0----===---------\n --------------------\n ==------------------\n --------------------\n ----------=?=-------\n ------=-------------\n -----===------------\n ----=====----===----\n =================---\n ====================`, tileset)\n\n    window.game = game // debug only pls\n    document.body.appendChild(game.canvas)\n\n    game.tileset = tileset\n    game.canvas.focus()\n\n    let didTick = false\n\n    !(function render() {\n      requestAnimationFrame(render)\n\n      if(document.hasFocus()) { // don't update if we're in devtools\n        game.canvasClear()\n\n        game.level.update()\n        game.level.draw()\n\n        game.player.update()\n        game.player.draw()\n      }\n    })()\n  }\n\n  tileset.src = 'tileset.png'\n})\n","// General utility functions.\n\n// Gets the sign of a number, as a number. If the given number is negative,\n// it returns -1, if positive, 1, and if zero, 0.\nexport function sign(n: number): number {\n  if (n > 0) return 1\n  if (n < 0) return -1\n  return 0\n}\n"]}