{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/pleasejs/dist/Please.js","node_modules/trim-lines/index.js","src/Entity.js","src/Level.js","src/SLW.js","src/Tile.js","src/index.js","src/util.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","define","amd","this","Math","random","floor","max","min","F","HSV_to_HEX","HSV_to_RGB","g","b","console","error","hasOwnProperty","charCodeAt","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hue","saturation","value","base_color","greyscale","grayscale","golden","full_random","colors_returned","format","seed","c","scheme_type","h","NAME_to_HEX","toLowerCase","NAME_to_RGB","HEX_to_RGB","NAME_to_HSV","HEX_to_HSV","replace","exec","parseInt","RGB_to_HEX","toString","slice","v","RGB_to_HSV","make_scheme","d","push","abs","make_color","match","m","E","p","make_contrast","trimLines","String","WHITE_SPACE_COLLAPSABLE_LINE","LINE","_SLW","_Tile","_util","DEBUG","Entity","game","_classCallCheck","x","y","xv","yv","w","color","sign","collides","_i","_arr","_i2","relative","tileAbove","level","tileAt","round","_Tile2","default","size","top","onAirPunched","ctx","canvas","getContext","CanvasRenderingContext2D","fillStyle","fillRect","left","tileLeft","tileRight","right","tileTop","tileBottom","bottom","levelWidth","levelHeight","collision","tile","solid","ceil","Player","arguments","undefined","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","jumpSound","window","Audio","keys","grounded","play","_get","prototype","Level","id","leveldata","tileset","tilemap","rows","split","row","get","exists","onCreate","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","onUpdate","err","return","viewStartX","viewStartY","viewEndX","viewEndY","_getAbsolutePosition","getAbsolutePosition","_getAbsolutePosition2","_slicedToArray","rendX","rendY","_tile$position","position","tileX","tileY","drawImage","_ref2","_ref","warn","newTile","_ref4","_ref3","oldTile","onDestroy","_ref6","_ref5","_Level","_Entity","SLW","document","createElement","width","height","addEventListener","evt","keyCode","setAttribute","player","camera","_Level2","Tile","props","name","str","RangeError","Map","_class","_inherits","_class2","_createClass","key","_Tile3","_class3","_Tile4","_class4","_Tile5","_class5","Image","onload","_SLW2","body","appendChild","focus","render","requestAnimationFrame","hasFocus","canvasClear","update","draw","src"],"mappings":"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","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!Please JS v0.4.2, Jordan Checkman 2014, Checkman.io, MIT License, Have fun.*/\n!function(e,r,a){\"function\"==typeof define&&define.amd?define([],a):\"object\"==typeof exports?module.exports=a():r[e]=a()}(\"Please\",this,function(){\"use strict\";function e(){function e(e,r,a){var o=Math.random;return a instanceof l&&(o=a.random),Math.floor(o()*(r-e+1))+e}function r(e,r,a){var o=Math.random;return a instanceof l&&(o=a.random),o()*(r-e)+e}function a(e,r,a){return Math.max(r,Math.min(e,a))}function o(e,r){var a;switch(e){case\"hex\":for(a=0;a<r.length;a++)r[a]=F.HSV_to_HEX(r[a]);break;case\"rgb\":for(a=0;a<r.length;a++)r[a]=F.HSV_to_RGB(r[a]);break;case\"rgb-string\":for(a=0;a<r.length;a++){var o=F.HSV_to_RGB(r[a]);r[a]=\"rgb(\"+o.r+\",\"+o.g+\",\"+o.b+\")\"}break;case\"hsv\":break;default:console.error(\"Format not recognized.\")}return r}function n(e){var r=F.HSV_to_RGB(e),a=(299*r.r+587*r.g+114*r.b)/1e3;return a>=128?\"dark\":\"light\"}function t(e){var r={};for(var a in e)e.hasOwnProperty(a)&&(r[a]=e[a]);return r}function l(e){function r(){o=(o+1)%256,n=(n+a[o])%256;var e=a[o];return a[o]=a[n],a[n]=e,a[(a[o]+a[n])%256]}for(var a=[],o=0,n=0,t=0;256>t;t++)a[t]=t;for(var l=0,F=0;256>l;l++){F=(F+a[l]+e.charCodeAt(l%e.length))%256;var s=a[l];a[l]=a[F],a[F]=s}this.random=function(){for(var e=0,a=0,o=1;8>e;e++)a+=r()*o,o*=256;return a/0x10000000000000000}}var F={},s={aliceblue:\"F0F8FF\",antiquewhite:\"FAEBD7\",aqua:\"00FFFF\",aquamarine:\"7FFFD4\",azure:\"F0FFFF\",beige:\"F5F5DC\",bisque:\"FFE4C4\",black:\"000000\",blanchedalmond:\"FFEBCD\",blue:\"0000FF\",blueviolet:\"8A2BE2\",brown:\"A52A2A\",burlywood:\"DEB887\",cadetblue:\"5F9EA0\",chartreuse:\"7FFF00\",chocolate:\"D2691E\",coral:\"FF7F50\",cornflowerblue:\"6495ED\",cornsilk:\"FFF8DC\",crimson:\"DC143C\",cyan:\"00FFFF\",darkblue:\"00008B\",darkcyan:\"008B8B\",darkgoldenrod:\"B8860B\",darkgray:\"A9A9A9\",darkgrey:\"A9A9A9\",darkgreen:\"006400\",darkkhaki:\"BDB76B\",darkmagenta:\"8B008B\",darkolivegreen:\"556B2F\",darkorange:\"FF8C00\",darkorchid:\"9932CC\",darkred:\"8B0000\",darksalmon:\"E9967A\",darkseagreen:\"8FBC8F\",darkslateblue:\"483D8B\",darkslategray:\"2F4F4F\",darkslategrey:\"2F4F4F\",darkturquoise:\"00CED1\",darkviolet:\"9400D3\",deeppink:\"FF1493\",deepskyblue:\"00BFFF\",dimgray:\"696969\",dimgrey:\"696969\",dodgerblue:\"1E90FF\",firebrick:\"B22222\",floralwhite:\"FFFAF0\",forestgreen:\"228B22\",fuchsia:\"FF00FF\",gainsboro:\"DCDCDC\",ghostwhite:\"F8F8FF\",gold:\"FFD700\",goldenrod:\"DAA520\",gray:\"808080\",grey:\"808080\",green:\"008000\",greenyellow:\"ADFF2F\",honeydew:\"F0FFF0\",hotpink:\"FF69B4\",indianred:\"CD5C5C\",indigo:\"4B0082\",ivory:\"FFFFF0\",khaki:\"F0E68C\",lavender:\"E6E6FA\",lavenderblush:\"FFF0F5\",lawngreen:\"7CFC00\",lemonchiffon:\"FFFACD\",lightblue:\"ADD8E6\",lightcoral:\"F08080\",lightcyan:\"E0FFFF\",lightgoldenrodyellow:\"FAFAD2\",lightgray:\"D3D3D3\",lightgrey:\"D3D3D3\",lightgreen:\"90EE90\",lightpink:\"FFB6C1\",lightsalmon:\"FFA07A\",lightseagreen:\"20B2AA\",lightskyblue:\"87CEFA\",lightslategray:\"778899\",lightslategrey:\"778899\",lightsteelblue:\"B0C4DE\",lightyellow:\"FFFFE0\",lime:\"00FF00\",limegreen:\"32CD32\",linen:\"FAF0E6\",magenta:\"FF00FF\",maroon:\"800000\",mediumaquamarine:\"66CDAA\",mediumblue:\"0000CD\",mediumorchid:\"BA55D3\",mediumpurple:\"9370D8\",mediumseagreen:\"3CB371\",mediumslateblue:\"7B68EE\",mediumspringgreen:\"00FA9A\",mediumturquoise:\"48D1CC\",mediumvioletred:\"C71585\",midnightblue:\"191970\",mintcream:\"F5FFFA\",mistyrose:\"FFE4E1\",moccasin:\"FFE4B5\",navajowhite:\"FFDEAD\",navy:\"000080\",oldlace:\"FDF5E6\",olive:\"808000\",olivedrab:\"6B8E23\",orange:\"FFA500\",orangered:\"FF4500\",orchid:\"DA70D6\",palegoldenrod:\"EEE8AA\",palegreen:\"98FB98\",paleturquoise:\"AFEEEE\",palevioletred:\"D87093\",papayawhip:\"FFEFD5\",peachpuff:\"FFDAB9\",peru:\"CD853F\",pink:\"FFC0CB\",plum:\"DDA0DD\",powderblue:\"B0E0E6\",purple:\"800080\",rebeccapurple:\"663399\",red:\"FF0000\",rosybrown:\"BC8F8F\",royalblue:\"4169E1\",saddlebrown:\"8B4513\",salmon:\"FA8072\",sandybrown:\"F4A460\",seagreen:\"2E8B57\",seashell:\"FFF5EE\",sienna:\"A0522D\",silver:\"C0C0C0\",skyblue:\"87CEEB\",slateblue:\"6A5ACD\",slategray:\"708090\",slategrey:\"708090\",snow:\"FFFAFA\",springgreen:\"00FF7F\",steelblue:\"4682B4\",tan:\"D2B48C\",teal:\"008080\",thistle:\"D8BFD8\",tomato:\"FF6347\",turquoise:\"40E0D0\",violet:\"EE82EE\",wheat:\"F5DEB3\",white:\"FFFFFF\",whitesmoke:\"F5F5F5\",yellow:\"FFFF00\",yellowgreen:\"9ACD32\"},i=.618033988749895,u={hue:null,saturation:null,value:null,base_color:\"\",greyscale:!1,grayscale:!1,golden:!0,full_random:!1,colors_returned:1,format:\"hex\",seed:null},c={scheme_type:\"analogous\",format:\"hex\"},h={golden:!1,format:\"hex\"};return F.NAME_to_HEX=function(e){return e=e.toLowerCase(),e in s?s[e]:(console.error(\"Color name not recognized.\"),void 0)},F.NAME_to_RGB=function(e){return F.HEX_to_RGB(F.NAME_to_HEX(e))},F.NAME_to_HSV=function(e){return F.HEX_to_HSV(F.NAME_to_HEX(e))},F.HEX_to_RGB=function(e){var r=/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;e=e.replace(r,function(e,r,a,o){return r+r+a+a+o+o});var a=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(e);return a?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16)}:null},F.RGB_to_HEX=function(e){return\"#\"+((1<<24)+(e.r<<16)+(e.g<<8)+e.b).toString(16).slice(1)},F.HSV_to_RGB=function(e){var r,a,o,n,t,l,F,s,i=e.h,u=e.s,c=e.v;if(0===u)return{r:c,g:c,b:c};switch(i/=60,n=Math.floor(i),t=i-n,l=c*(1-u),F=c*(1-u*t),s=c*(1-u*(1-t)),n){case 0:r=c,a=s,o=l;break;case 1:r=F,a=c,o=l;break;case 2:r=l,a=c,o=s;break;case 3:r=l,a=F,o=c;break;case 4:r=s,a=l,o=c;break;case 5:r=c,a=l,o=F}return{r:Math.floor(255*r),g:Math.floor(255*a),b:Math.floor(255*o)}},F.RGB_to_HSV=function(e){var r=e.r/255,a=e.g/255,o=e.b/255,n=0,t=0,l=0,F=Math.min(r,Math.min(a,o)),s=Math.max(r,Math.max(a,o));if(F===s)return l=F,{h:0,s:0,v:l};var i=r===F?a-o:o===F?r-a:o-r,u=r===F?3:o===F?1:5;return n=60*(u-i/(s-F)),t=(s-F)/s,l=s,{h:n,s:t,v:l}},F.HSV_to_HEX=function(e){return F.RGB_to_HEX(F.HSV_to_RGB(e))},F.HEX_to_HSV=function(e){return F.RGB_to_HSV(F.HEX_to_RGB(e))},F.make_scheme=function(e,r){function n(e){return{h:e.h,s:e.s,v:e.v}}var l,F,s,i,u,h=t(c);if(null!==r)for(var d in r)r.hasOwnProperty(d)&&(h[d]=r[d]);var g=[e];switch(h.scheme_type.toLowerCase()){case\"monochromatic\":case\"mono\":for(u=1;2>=u;u++)l=n(e),s=l.s+.1*u,s=a(s,0,1),i=l.v+.1*u,i=a(i,0,1),l.s=s,l.v=i,g.push(l);for(u=1;2>=u;u++)l=n(e),s=l.s-.1*u,s=a(s,0,1),i=l.v-.1*u,i=a(i,0,1),l.s=s,l.v=i,g.push(l);break;case\"complementary\":case\"complement\":case\"comp\":l=n(e),l.h=(l.h+180)%360,g.push(l);break;case\"split-complementary\":case\"split-complement\":case\"split\":l=n(e),l.h=(l.h+165)%360,g.push(l),l=n(e),l.h=Math.abs((l.h-165)%360),g.push(l);break;case\"double-complementary\":case\"double-complement\":case\"double\":l=n(e),l.h=(l.h+180)%360,g.push(l),l.h=(l.h+30)%360,F=n(l),g.push(l),l.h=(l.h+180)%360,g.push(F);break;case\"analogous\":case\"ana\":for(u=1;5>=u;u++)l=n(e),l.h=(l.h+20*u)%360,g.push(l);break;case\"triadic\":case\"triad\":case\"tri\":for(u=1;3>u;u++)l=n(e),l.h=(l.h+120*u)%360,g.push(l);break;default:console.error(\"Color scheme not recognized.\")}return o(h.format.toLowerCase(),g),g},F.make_color=function(n){var s=[],c=t(u),h=null;if(null!==n)for(var d in n)n.hasOwnProperty(d)&&(c[d]=n[d]);var g=null;\"string\"==typeof c.seed&&(g=new l(c.seed)),c.base_color.length>0&&(h=c.base_color.match(/^#?([0-9a-f]{3})([0-9a-f]{3})?$/i)?F.HEX_to_HSV(c.base_color):F.NAME_to_HSV(c.base_color));for(var m=0;m<c.colors_returned;m++){var f,E,b,p=e(0,360,g);null!==h?(f=a(e(h.h-5,h.h+5,g),0,360),E=0===h.s?0:r(.4,.85,g),b=r(.4,.85,g),s.push({h:f,s:E,v:b})):(f=c.greyscale===!0||c.grayscale===!0?0:c.golden===!0?(p+p/i)%360:null===c.hue||c.full_random===!0?p:a(c.hue,0,360),E=c.greyscale===!0||c.grayscale===!0?0:c.full_random===!0?r(0,1,g):null===c.saturation?.4:a(c.saturation,0,1),b=c.full_random===!0?r(0,1,g):c.greyscale===!0||c.grayscale===!0?r(.15,.75,g):null===c.value?.75:a(c.value,0,1),s.push({h:f,s:E,v:b}))}return o(c.format.toLowerCase(),s),s},F.make_contrast=function(e,r){var l=t(h);if(null!==r)for(var s in r)r.hasOwnProperty(s)&&(l[s]=r[s]);var u,c,d=n(e);if(l.golden===!0)c=e.h*(1+i)%360;else{var g=F.make_scheme(e,{scheme_type:\"complementary\",format:\"hsv\"})[1];c=a(g.h-30,0,360)}var m;return\"dark\"===d?m=a(e.v-.25,0,1):\"light\"===d&&(m=a(e.v+.25,0,1)),u=[{h:c,s:e.s,v:m}],o(l.format.toLowerCase(),u),u[0]},F}return e()});","'use strict';\n\n/*\n * Constants.\n */\n\nvar WHITE_SPACE_COLLAPSABLE_LINE = /[ \\t]*\\n+[ \\t]*/g;\nvar LINE = '\\n';\n\n/**\n * Remove initial and final spaces and tabs at the\n * line breaks in `value`. Does not trim initial and\n * final spaces and tabs of the value itself.\n *\n * @example\n *   trimLines(' foo\\t\\n\\n bar \\n\\tbaz '); // ' foo\\nbar\\nbaz '\n *\n * @param {string} value - Value with untrimmed line breaks,\n *   coerced to string.\n * @return {string} - Value with trimmed line breaks.\n */\nfunction trimLines(value) {\n    return String(value).replace(WHITE_SPACE_COLLAPSABLE_LINE, LINE);\n}\n\n/*\n * Expose.\n */\n\nmodule.exports = trimLines;\n","// @flow\n\n// show bounding boxes, among other things\nconst DEBUG = true\n\nimport SLW from './SLW'\nimport Tile from './Tile'\n\nimport { sign } from './util'\n\nexport default class Entity {\n  game: SLW\n\n  // Position, absolute (not tileX/Y!)\n  x: number\n  y: number\n\n  // Velocity\n  xv: number\n  yv: number\n\n  // Dimensions (used for bounding box)\n  w: number // width\n  h: number // height\n\n  color: string // \"rgba(r, g, b, a)\"\n\n  get top(): number {\n    return Math.floor(this.y)\n  }\n\n  get bottom(): number {\n    return Math.floor(this.y + this.h)\n  }\n\n  get left(): number {\n    return Math.floor(this.x)\n  }\n\n  get right(): number {\n    return Math.floor(this.x + this.w)\n  }\n\n  constructor(game: SLW) {\n    this.game = game\n\n    this.x = 0\n    this.y = 0\n\n    this.xv = 0\n    this.yv = 0\n\n    this.w = 16\n    this.h = 16\n\n    // pleasing color for debugging reasons :P\n    const c = require('pleasejs').make_color({ format: 'rgb' })[0]\n    this.color = `rgba(${c.r}, ${c.g}, ${c.b}, 0.75)`\n  }\n\n  update(game: SLW) {\n    let v: number = 0\n\n    // x:\n    const xv = Math.floor(this.xv)\n    v = sign(xv)\n\n    for (let i = 0; i < Math.abs(xv); i++) {\n      this.x += v\n      if (this.collides) {\n        this.x -= v\n        this.xv = 0\n      }\n    }\n\n    // y:\n    const yv = Math.floor(this.yv)\n    v = sign(yv)\n\n    for (let i = 0; i < Math.abs(yv); i++) {\n      this.y += v\n      if (this.collides) {\n        this.y -= v\n        this.yv = 0\n\n        for (let relative of [+0.3, -0.3]) {\n          const tileAbove = this.game.level.tileAt([\n            Math.round(this.x / Tile.size + relative, this.top / Tile.size - 1),\n            this.top / Tile.size - 1\n          ])\n\n          tileAbove.onAirPunched(tileAbove)\n        }\n      }\n    }\n  }\n\n  draw(game: SLW) {\n    const ctx = game.canvas.getContext('2d')\n    if (!(ctx instanceof CanvasRenderingContext2D)) return\n\n    if (DEBUG) {\n      // Draw the bounding box.\n      ctx.fillStyle = this.color\n      ctx.fillRect(this.left, this.top, this.w + 1, this.h + 1)\n    }\n  }\n\n  // Are we currently intersecting any solid Tiles?\n  get collides(): boolean {\n    let tileLeft   = Math.floor(this.left   / Tile.size)\n    let tileRight  = Math.floor(this.right  / Tile.size)\n    let tileTop    = Math.floor(this.top    / Tile.size)\n    let tileBottom = Math.floor(this.bottom / Tile.size)\n\n    const levelWidth  = this.game.level.w\n    const levelHeight = this.game.level.h\n\n    if (tileLeft < 0)             tileLeft = 0\n    if (tileRight > levelWidth)   tileRight = levelWidth\n    if (tileTop < 0)              tileTop = 0\n    if (tileBottom > levelHeight) tileBottom = levelHeight\n\n    let collision = false\n    for (let x = tileLeft; x <= tileRight; x++) {\n      for (let y = tileTop; y <= tileBottom; y++) {\n        let tile = this.game.level.tileAt([x, y])\n\n        if (tile.solid) collision = true\n      }\n    }\n\n    return collision\n  }\n\n  // Whether or not the entity is on the ground or not.\n  get grounded(): boolean {\n    // Check if either the tile below the player to the LEFT or the tile below\n    // the player to the RIGHT is solid.\n    return (\n      this.game.level.tileAt(\n        [Math.floor(this.x / 16), this.bottom / 16 + 0.1]).solid ||\n      this.game.level.tileAt(\n        [Math.ceil(this.x / 16), this.bottom / 16 + 0.1]).solid\n    )\n  }\n}\n\nexport class Player extends Entity {\n  jumpSound: window.Audio\n\n  constructor(game: SLW, x: number = 0, y:number = 0) {\n    super(game)\n\n    this.x = x\n    this.y = y\n\n    this.w = 16\n    this.h = 24\n\n    this.jumpSound = new window.Audio('sound/smw_jump.wav')\n  }\n\n  update(game: SLW) {\n    if (game.keys[39]) {\n      this.xv += 1\n    }\n\n    if (game.keys[37]) {\n      this.xv -= 1\n    }\n\n    if (!game.keys[39] && !game.keys[37]) {\n      // slow down\n      this.xv += sign(this.xv) * -0.5\n    }\n\n    if (this.grounded && game.keys[32]) {\n      // jump\n      this.yv = -4\n      this.jumpSound.play()\n    }\n\n    this.xv = Math.min(this.xv,  3)\n    this.xv = Math.max(this.xv, -3)\n    this.yv = Math.min(this.yv,  4)\n\n    this.yv += 0.25 // TODO actual gravity\n\n    super.update(game)\n  }\n}\n","// @flow\n\nimport SLW from './SLW'\nimport Tile from './Tile'\n\ntype Position = [number, number]\n\nexport default class Level {\n  id: [number, number]\n  game: SLW\n\n  tileset: Image\n  tilemap: Array <Array <Tile>>\n\n  w: number // width\n  h: number // height\n\n  constructor(\n    game: SLW,\n    id: [number, number] = [1, 1],\n    leveldata: string,\n    tileset: Image,\n  ) {\n    this.id = id\n    this.game = game\n\n    this.tileset = tileset\n\n    // Convert tilemap into a 2D array of Tiles:\n    this.tilemap = []\n    let rows = leveldata.split('\\n')\n    for (let y = 0; y < rows.length; y++) {\n      this.tilemap[y] = []\n      let row = rows[y]\n      for (let x = 0; x < row.length; x++) {\n        let tile = new (Tile.get(row[x]))\n\n        tile.x = x\n        tile.y = y\n        tile.game = game\n        tile.exists = true\n\n        tile.onCreate()\n\n        this.tilemap[y].push(tile)\n      }\n    }\n\n    this.w = rows.length\n    this.h = rows[0].length\n  }\n\n  update() {\n    // Call update() on the tilemap's Tiles\n    for (let row of this.tilemap) {\n      for (let tile of row) {\n        tile.onUpdate()\n      }\n    }\n  }\n\n  draw() {\n    // Draw the tilemap\n    const ctx = this.game.canvas.getContext('2d')\n    if (!(ctx instanceof CanvasRenderingContext2D)) return\n\n    const viewStartX = 0\n    const viewStartY = 0\n    const viewEndX = 16\n    const viewEndY = 16\n\n    for (let y = viewStartY; y < viewEndY; y++) {\n      for (let x = viewStartX; x < viewEndX; x++) {\n        const tile = this.tileAt([x, y])\n        const [rendX, rendY] = this.getAbsolutePosition([x, y])\n        const [tileX, tileY] = tile.position\n\n        ctx.drawImage(\n          this.tileset,\n          tileX * Tile.size, tileY * Tile.size,\n          Tile.size, Tile.size,\n\n          rendX, rendY, Tile.size, Tile.size)\n      }\n    }\n  }\n\n  // Get a Tile from its Position in the tilemap.\n  tileAt([tileX: number, tileY: number]: Position): Tile {\n    tileX = Math.floor(tileX)\n    tileY = Math.floor(tileY)\n\n    try {\n      return this.tilemap[tileY][tileX]\n    } catch(e) {\n      // fallback to void tile\n      console.warn(`Level.at([${tileX}, ${tileY}]) failed to retrieve Tile`)\n      return new (Tile.get(' '))\n    }\n  }\n\n  replaceTile([tileX: number, tileY: number]: Position, newTile: Tile): Tile {\n    newTile.x = tileX\n    newTile.y = tileY\n    newTile.game = this.game\n    newTile.exists = true\n\n    let oldTile = this.tileAt([tileX, tileY])\n    oldTile.exists = false\n    oldTile.onDestroy()\n\n    this.tilemap[tileY][tileX] = newTile\n    newTile.onCreate()\n\n    return newTile\n  }\n\n  // Gets the drawn position of a given tile position. For example, assuming\n  // that the tile size is 16, getDrawnPosition([0, 2]) would become [0, 32].\n  getAbsolutePosition([tileX, tileY]: Position): Position {\n    return [\n      Math.floor(tileX * Tile.size),\n      Math.floor(tileY * Tile.size)\n    ]\n  }\n}\n","// @flow\n\n// SUPER LIAM WORLD(tm)\n// totally not stolen from an-ok-squirrel.\n// this is a fair use of the name as specified\n// in NANALAND RULES NUMBER #99\n\ntype Position = [number, number]\n\nconst trimLines = require('trim-lines')\n\nimport Tile from './Tile'\nimport Level from './Level'\nimport { Player } from './Entity'\n\nexport default class SLW {\n  // Map to store key-pressed data in.\n  keys: Object\n\n  // Canvas used to display the game on.\n  canvas: HTMLCanvasElement\n\n  // Player object - the character that walks around the screen using the\n  // user's input as controls.\n  player: Player\n\n  // Camera object - where the camera is. TODO make this a class\n  camera: Position\n\n  // Level, to contain information about the currently active level.\n  level: Level\n\n  constructor(leveldata: string, tileset: Image) {\n    this.keys = {}\n\n    this.canvas = document.createElement('canvas')\n    this.canvas.width = 256\n    this.canvas.height = 256\n\n    this.canvas.addEventListener('keydown', (evt: KeyboardEvent) => {\n      this.keys[evt.keyCode] = true\n    })\n\n    this.canvas.addEventListener('keyup', (evt: KeyboardEvent) => {\n      this.keys[evt.keyCode] = false\n    })\n\n    this.canvas.setAttribute('tabindex', '1')\n\n    this.player = new Player(this, 16, 16)\n\n    // @TODO Camera:\n    this.camera = [0, 0]\n\n    this.level = new Level(this, [1, 1], trimLines(leveldata), tileset)\n  }\n\n  // Clears the game canvas.\n  canvasClear() {\n    const ctx = this.canvas.getContext('2d')\n\n    if (ctx instanceof CanvasRenderingContext2D) {\n      ctx.fillStyle = '#f8e0b2'\n      ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n  }\n}\n","// @flow\n\nimport SLW from './SLW'\ntype Position = [number, number]\n\nexport default class Tile {\n  game: SLW\n\n  // Human-readable name\n  name: string\n\n  // Absolute [x, y] position in tileset.png\n  position: Position\n\n  // true if objects should collide with this tile\n  solid: boolean\n\n  x: number\n  y: number\n  exists: boolean\n\n  constructor(props: Object = {}) {\n    this.name = props.name || 'Unknown'\n    this.position = props.position\n    this.solid = props.solid || false\n    this.exists = false\n  }\n\n  static size: number\n\n  // Get a Tile class from its String representation.\n  static get(str: string): Class<Tile> {\n    let tile = tilemap.get(str)\n\n    if(tile) return tile\n    else throw new RangeError('Tile ' + str + ' not found.')\n  }\n\n  // Called when this Tile comes into existence, e.g. the level loads.\n  onCreate() {}\n\n  // Called if and when this Tile is replaced with another.\n  onDestroy() {}\n\n  // Called every frame.\n  onUpdate() {}\n\n  // Air punched, e.g. hitting a question mark block.\n  onAirPunched() {}\n}\n\nexport const tilemap: Map <string, Class<Tile>> = new Map([\n  ['=', class extends Tile {\n    constructor() {\n      super({\n        name: 'Solid Block',\n        position: [0, 0],\n        solid: true\n      })\n    }\n  }],\n\n  ['?', class extends Tile {\n    constructor() {\n      super({\n        name: '? Block',\n        position: [1, 0],\n        solid: true\n      })\n    }\n\n    onAirPunched() {\n      new window.Audio('sound/smw_shell_ricochet.wav').play()\n\n      if (this.game && this.x && this.y) {\n        const tile = new Tile.get('x')\n        // this.game.level.replaceTile([this.x, this.y], tile)\n      }\n    }\n  }],\n\n  ['-', class extends Tile {\n    constructor() {\n      super({\n        name: 'Air',\n        position: [2, 0],\n      })\n    }\n  }],\n\n  ['x', class extends Tile {\n    constructor() {\n      super({\n        name: 'Punched ? Block',\n        position: [3, 0],\n        solid: true,\n      })\n    }\n  }],\n\n  [' ', class extends Tile {\n    constructor() {\n      super({\n        name: 'Void',\n        position: [0, 1],\n      })\n    }\n  }],\n])\n\nTile.size = 16\n","import SLW from './SLW'\n\nwindow.addEventListener('load', e => {\n  let tileset = new Image\n\n  tileset.onload = () => {\n    const game = new SLW(\n`--------------------\n --------------------\n --------------------\n --------------------\n ----------------===-\n --------------------\n --------------------\n --------===---------\n --------------------\n ==------------------\n --------------------\n =??-------=?=-------\n ------=-------------\n -----===------------\n ----=====----===----\n =================---\n ====================`, tileset)\n\n    window.game = game // debug only pls\n    document.body.appendChild(game.canvas)\n\n    game.tileset = tileset\n    game.canvas.focus()\n\n    let didTick = false\n\n    !(function render() {\n      requestAnimationFrame(render)\n\n      if(document.hasFocus()) { // don't update if we're in devtools\n        game.canvasClear()\n\n        game.level.update()\n        game.level.draw()\n\n        game.player.update(game)\n        game.player.draw(game)\n      }\n    })()\n  }\n\n  tileset.src = 'tileset.png'\n})\n","// General utility functions.\n\n// Gets the sign of a number, as a number. If the given number is negative,\n// it returns -1, if positive, 1, and if zero, 0.\nexport function sign(n: number): number {\n  if (n > 0) return 1\n  if (n < 0) return -1\n  return 0\n}\n"]}